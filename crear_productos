import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QStatusBar, QListView, QGraphicsView, QGraphicsScene, QFileDialog, QAbstractItemView, QGraphicsPixmapItem
from PyQt5.QtSql import QSqlDatabase, QSqlQuery, QSqlQueryModel
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon, QStandardItem, QStandardItemModel, QIntValidator, QValidator, QDoubleValidator, QRegExpValidator, QPixmap
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox,QTableWidgetItem, QLabel
from PyQt5.QtCore import QTimer,QDateTime, Qt, QRegExp
from Crear_Marcas import ConfiguracionMarcas
from Linea_Inventario import ConfiguracionLinea
import time
import os
import re
import asteval
import sqlite3

class MathValidator(QValidator):
    def __init__(self):
        super(MathValidator, self).__init__()

    def validate(self, input_str, pos):
        # Permitir solo números, operadores y paréntesis
        pattern = r'^[0-9+\-*/()$. ]+$'
        if re.match(pattern, input_str):
            return (QValidator.Acceptable, input_str, pos)
        elif re.match(r'^[0-9+\-*/()$. ]*$', input_str):
            return (QValidator.Intermediate, input_str, pos)
        else:
            return (QValidator.Invalid, input_str, pos)

    def fixup(self, input_str):
        # No hacer nada en este caso
        pass

class CrearProductos(QMainWindow):
    def __init__(self):
        super().__init__()
        self.imagen_scene = QGraphicsScene()
        self.setupUi(self)
        self.cargar_productos_en_tabla()
        self.cargar_marcas()
        self.cargar_linea()
        
    conn = sqlite3.connect('Usuarios.db')
    cursor = conn.cursor()

    def setupUi(self, MainWindow):
        self.setWindowTitle("Crear Productos")
        MainWindow.resize(1114, 860)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("Crear Productos")

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # Creamos el QLineEdit para el código
        self.codigo_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.producto_creado = False
        self.codigo_edit.setGeometry(QtCore.QRect(25, 60, 97, 25))
        self.codigo_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.codigo_edit.setText("")
        self.codigo_edit.setObjectName("codigo_edit")
        self.codigo_edit.editingFinished.connect(lambda: self.mostrar_mensaje_estado(self.codigo_edit, "Ingrese el código del producto"))

        # Creamos el QLabel para el código
        self.codigo_label = QtWidgets.QLabel(self.centralwidget)
        self.codigo_label.setGeometry(QtCore.QRect(26, 40, 47, 13))
        self.codigo_label.setObjectName("codigo_label")

        # Creamos el QLabel para la descripcion
        self.descripcion_label = QtWidgets.QLabel(self.centralwidget)
        self.descripcion_label.setGeometry(QtCore.QRect(136, 40, 61, 16))
        self.descripcion_label.setObjectName("descripcion_label")

        # Creamos el QLineEdit para la descripcion
        self.descripcion_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.descripcion_edit.setGeometry(QtCore.QRect(134, 60, 303, 25))
        self.descripcion_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.descripcion_edit.setObjectName("descripcion_edit")
        self.descripcion_edit.editingFinished.connect(lambda: self.mostrar_mensaje_estado(self.descripcion_edit, "Ingrese una descripción del producto"))

        # Creamos el combobox para las marca
        self.marca_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.marca_comboBox.setGeometry(QtCore.QRect(25, 105, 111, 22))
        self.marca_comboBox.setStyleSheet("")
        self.marca_comboBox.currentTextChanged.connect(self.abrir_ventana_marcas)

        # Creamos el combobox para las marca
        self.marca_label = QtWidgets.QLabel(self.centralwidget)
        self.marca_label.setGeometry(QtCore.QRect(25, 90, 47, 13))
        self.marca_label.setObjectName("marca_label")


        self.linea_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.linea_comboBox.setGeometry(QtCore.QRect(161, 105, 277, 22))
        self.linea_comboBox.setStyleSheet("")
        self.linea_comboBox.currentTextChanged.connect(self.abrir_ventana_linea)


        self.linea_label = QtWidgets.QLabel(self.centralwidget)
        self.linea_label.setGeometry(QtCore.QRect(161, 88, 101, 16))
        self.linea_label.setObjectName("linea_label")


        self.unidad_label = QtWidgets.QLabel(self.centralwidget)
        self.unidad_label.setGeometry(QtCore.QRect(24, 135, 47, 13))
        self.unidad_label.setObjectName("unidad_label")


        self.unidad_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.unidad_edit.setGeometry(QtCore.QRect(24, 150, 61, 25))
        self.unidad_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.unidad_edit.setValidator(QIntValidator()) # Establece el validador de enteros
        self.unidad_edit.setObjectName("unidad_edit")
        self.unidad_edit.editingFinished.connect(lambda: self.mostrar_mensaje_estado(self.unidad_edit, "Ingrese la unidad del producto"))


        self.paquete_label = QtWidgets.QLabel(self.centralwidget)
        self.paquete_label.setGeometry(QtCore.QRect(130, 135, 47, 13))
        self.paquete_label.setObjectName("paquete_label")


        self.paquete_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.paquete_edit.setGeometry(QtCore.QRect(130, 150, 71, 25))
        self.paquete_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.paquete_edit.setObjectName("paquete_edit")


        self.costo_moneda_local_groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.costo_moneda_local_groupBox.setGeometry(QtCore.QRect(23, 230, 241, 131))
        self.costo_moneda_local_groupBox.setStyleSheet("QGroupBox {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")


        self.costo_anterior_label = QtWidgets.QLabel(self.costo_moneda_local_groupBox)
        self.costo_anterior_label.setGeometry(QtCore.QRect(10, 20, 81, 16))
        self.costo_anterior_label.setObjectName("costo_anterior_label")


        self.costo_anterior_edit = QtWidgets.QLineEdit(self.costo_moneda_local_groupBox)
        self.costo_anterior_edit.setGeometry(QtCore.QRect(10, 40, 91, 25))
        self.costo_anterior_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.costo_anterior_edit.setValidator(MathValidator())
        self.set_moneda_placeholder(self.costo_anterior_edit, 'Bs.')
        self.costo_anterior_edit.setObjectName("costo_anterior_edit")
        self.costo_anterior_edit.editingFinished.connect(lambda: self.calcular_costo(self.costo_anterior_edit))
        self.costo_anterior_edit.editingFinished.connect(lambda: self.mostrar_mensaje_estado(self.costo_anterior_edit, "Ingrese el costo anterior del producto"))

        
        self.costo_actual_label = QtWidgets.QLabel(self.costo_moneda_local_groupBox)
        self.costo_actual_label.setGeometry(QtCore.QRect(10, 70, 71, 16))
        self.costo_actual_label.setObjectName("costo_actual_label")


        self.costo_actual_edit = QtWidgets.QLineEdit(self.costo_moneda_local_groupBox)
        self.costo_actual_edit.setGeometry(QtCore.QRect(10, 90, 91, 25))
        self.costo_actual_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.costo_actual_edit.setText("")
        self.costo_actual_edit.setValidator(MathValidator())
        self.set_moneda_placeholder(self.costo_actual_edit, 'Bs.')
        self.costo_actual_edit.setObjectName("costo_actual_edit")
        self.costo_actual_edit.editingFinished.connect(lambda: self.calcular_costo(self.costo_actual_edit))
        self.costo_actual_edit.editingFinished.connect(lambda: self.mostrar_mensaje_estado(self.costo_actual_edit, "Ingrese el costo actual del producto"))

        
        self.costo_promedio_edit = QtWidgets.QLineEdit(self.costo_moneda_local_groupBox)
        self.costo_promedio_edit.setGeometry(QtCore.QRect(120, 40, 91, 25))
        self.costo_promedio_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.costo_promedio_edit.setValidator(MathValidator())
        self.set_moneda_placeholder(self.costo_promedio_edit, 'Bs.')
        self.costo_promedio_edit.setObjectName("costo_promedio_edit")
        self.costo_promedio_edit.editingFinished.connect(lambda: self.calcular_costo(self.costo_promedio_edit))
        self.costo_promedio_edit.editingFinished.connect(lambda: self.mostrar_mensaje_estado(self.costo_promedio_edit, "Ingrese el costo promedio del producto"))

        self.costo_promedio_label = QtWidgets.QLabel(self.costo_moneda_local_groupBox)
        self.costo_promedio_label.setGeometry(QtCore.QRect(120, 20, 81, 16))
        self.costo_promedio_label.setObjectName("costo_promedio_label")


        self.costo_reposicion_edit = QtWidgets.QLineEdit(self.costo_moneda_local_groupBox)
        self.costo_reposicion_edit.setGeometry(QtCore.QRect(120, 90, 91, 25))
        self.costo_reposicion_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.costo_reposicion_edit.setValidator(MathValidator())
        self.set_moneda_placeholder(self.costo_reposicion_edit, 'Bs.')
        self.costo_reposicion_edit.setObjectName("costo_reposicion_edit")
        self.costo_reposicion_edit.editingFinished.connect(lambda: self.calcular_costo(self.costo_reposicion_edit))
        self.costo_reposicion_edit.editingFinished.connect(lambda: self.mostrar_mensaje_estado(self.costo_reposicion_edit, "Ingrese el costo de reposición del producto"))


        self.costo_reposicion_label = QtWidgets.QLabel(self.costo_moneda_local_groupBox)
        self.costo_reposicion_label.setGeometry(QtCore.QRect(120, 70, 91, 16))
        self.costo_reposicion_label.setObjectName("costo_reposicion_label")


        self.costo_moneda_referencial_groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.costo_moneda_referencial_groupBox.setGeometry(QtCore.QRect(280, 230, 161, 131))
        self.costo_moneda_referencial_groupBox.setStyleSheet("QGroupBox {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.costo_moneda_referencial_groupBox.setObjectName("costo_moneda_referencial_groupBox")


        self.moneda_referencial_label = QtWidgets.QLabel(self.costo_moneda_referencial_groupBox)
        self.moneda_referencial_label.setGeometry(QtCore.QRect(10, 20, 101, 16))
        self.moneda_referencial_label.setObjectName("moneda_referencial_label")


        self.moneda_referencial_edit = QtWidgets.QLineEdit(self.costo_moneda_referencial_groupBox)
        self.moneda_referencial_edit.setGeometry(QtCore.QRect(10, 40, 113, 25))
        self.moneda_referencial_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #1bb0b0; /* Color de fondo */\n"
        "                border: 1px solid #ccc; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #ffffff; /* Color del texto blanco */\n"
        "                font-weight: bold;\n"
        "            }")
        self.moneda_referencial_edit.setObjectName("moneda_referencial_edit")


        self.costo_actual_referencial_edit = QtWidgets.QLineEdit(self.costo_moneda_referencial_groupBox)
        self.costo_actual_referencial_edit.setGeometry(QtCore.QRect(10, 90, 113, 25))
        self.costo_actual_referencial_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.costo_actual_referencial_edit.setValidator(MathValidator())
        self.set_moneda_placeholder(self.costo_actual_referencial_edit, '$')
        self.costo_actual_referencial_edit.setObjectName("costo_actual_referencial_edit")
        self.costo_actual_referencial_edit.textChanged.connect(self.restablecer_valor_predeterminado)
        self.costo_actual_referencial_edit.editingFinished.connect(lambda: self.calcular_costo(self.costo_actual_referencial_edit))
        self.costo_actual_referencial_edit.editingFinished.connect(lambda: self.mostrar_mensaje_estado(self.costo_actual_referencial_edit, "Ingrese el costo actual de referencia del producto"))
        self.costo_actual_referencial_edit.editingFinished.connect(self.actualizar_costo_actual)


        self.costo_actual_referencial_label = QtWidgets.QLabel(self.costo_moneda_referencial_groupBox)
        self.costo_actual_referencial_label.setGeometry(QtCore.QRect(10, 70, 71, 16))
        self.costo_actual_referencial_label.setObjectName("costo_actual_referencial_label")


        self.tab_widget = QtWidgets.QTabWidget(self.centralwidget)
        self.tab_widget.setGeometry(QtCore.QRect(10, 0, 1091, 791))
        self.tab_widget.setAutoFillBackground(False)
        self.tab_widget.setInputMethodHints(QtCore.Qt.ImhNone)
        self.tab_widget.setObjectName("tab_widget")


        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")


        self.imagen_producto_graphicsView = QtWidgets.QGraphicsView(self.tab_6)
        self.imagen_producto_graphicsView.setGeometry(QtCore.QRect(890, 41, 151, 181))
        self.imagen_producto_graphicsView.setStyleSheet("QGraphicsView {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.imagen_producto_graphicsView.setScene(self.imagen_scene)
        self.imagen_producto_graphicsView.setFixedSize(190, 200)
        self.imagen_producto_graphicsView.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.imagen_producto_graphicsView.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

        
        self.precios_tab = QtWidgets.QTabWidget(self.tab_6)
        self.precios_tab.setGeometry(QtCore.QRect(435, 20, 454, 321))
        self.precios_tab.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.precios_tab.setObjectName("precios_tab")


        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")


        self.moneda_listView = QtWidgets.QListView(self.tab_3)
        self.moneda_listView.setGeometry(QtCore.QRect(11, 10, 71, 25))
        self.moneda_listView.setStyleSheet("QListView {\n"
        "                background-color: #1bb0b0; /* Color de fondo negro */\n"
        "                border: 1px solid #ccc; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #ffffff; /* Color del texto negro */\n"
        "                font-weight: bold;\n"
        "            }")
        self.moneda_list_model = QStandardItemModel(self.moneda_listView)
        self.moneda_listView.setModel(self.moneda_list_model)

        item = QStandardItem("Bolivares")
        self.moneda_list_model.appendRow(item)


        self.utilidad_bs_label = QtWidgets.QLabel(self.tab_3)
        self.utilidad_bs_label.setGeometry(QtCore.QRect(10, 40, 47, 13))
        self.utilidad_bs_label.setObjectName("utilidad_bs_label")

        self.utilidad_bs_edit = QtWidgets.QLineEdit(self.tab_3)
        self.utilidad_bs_edit.setGeometry(QtCore.QRect(10, 60, 111, 25))
        self.utilidad_bs_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        regex = QRegExp("^[0-9]+([\\.,][0-9]+)?%?$")
        self.utilidad_bs_edit.setValidator(QRegExpValidator(regex))
        self.utilidad_bs_edit.textChanged.connect(self.actualizar_utilidad_bs)



        self.precio_sin_impuesto_bs_label = QtWidgets.QLabel(self.tab_3)
        self.precio_sin_impuesto_bs_label.setGeometry(QtCore.QRect(10, 90, 101, 16))
        self.precio_sin_impuesto_bs_label.setObjectName("precio_sin_impuesto_bs_label")


        self.precio_sin_impuesto_bs_edit = QtWidgets.QLineEdit(self.tab_3)
        self.precio_sin_impuesto_bs_edit.setGeometry(QtCore.QRect(10, 110, 111, 25))
        self.precio_sin_impuesto_bs_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_sin_impuesto_bs_edit.setValidator(QDoubleValidator())
        self.precio_sin_impuesto_bs_edit.setValidator(MathValidator())
        self.precio_sin_impuesto_bs_edit.setObjectName("precio_sin_impuesto_bs_edit")
        self.precio_sin_impuesto_bs_edit.textChanged.connect(lambda: self.calcular_costo(self.precio_sin_impuesto_bs_edit))
        self.precio_sin_impuesto_bs_edit.textChanged.connect(self.precio_dolar_sin_impuesto_edit_changed)

        self.impuesto_total_bs_label = QtWidgets.QLabel(self.tab_3)
        self.impuesto_total_bs_label.setGeometry(QtCore.QRect(10, 140, 81, 16))
        self.impuesto_total_bs_label.setObjectName("impuesto_total_bs_label")


        self.impuesto_total_bs_edit = QtWidgets.QLineEdit(self.tab_3)
        self.impuesto_total_bs_edit.setGeometry(QtCore.QRect(10, 160, 111, 25))
        self.impuesto_total_bs_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.impuesto_total_bs_edit.setValidator(QDoubleValidator())
        self.impuesto_total_bs_edit.setValidator(MathValidator())
        self.impuesto_total_bs_edit.setObjectName("impuesto_total_bs_edit")
        self.impuesto_total_bs_edit.textChanged.connect(lambda: self.calcular_costo(self.impuesto_total_bs_edit))
        self.impuesto_total_bs_edit.textChanged.connect(self.actualizar_utilidad_bs)


        self.precio_total_bs_label = QtWidgets.QLabel(self.tab_3)
        self.precio_total_bs_label.setGeometry(QtCore.QRect(10, 190, 61, 16))
        self.precio_total_bs_label.setObjectName("precio_total_bs_label")


        self.precio_total_bs_edit = QtWidgets.QLineEdit(self.tab_3)
        self.precio_total_bs_edit.setGeometry(QtCore.QRect(10, 210, 113, 25))
        self.precio_total_bs_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_total_bs_edit.setValidator(QDoubleValidator())
        self.precio_total_bs_edit.setValidator(MathValidator())
        self.precio_total_bs_edit.setObjectName("precio_total_bs_edit")
        self.precio_total_bs_edit.editingFinished.connect(lambda: self.calcular_costo(self.precio_total_bs_edit))
        self.precio_total_bs_edit.textChanged.connect(self.actualizar_utilidad_bs)


        self.lineEdit_17 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_17.setGeometry(QtCore.QRect(144, 60, 91, 25))
        self.lineEdit_17.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_total_bs_edit.setValidator(QDoubleValidator())
        self.lineEdit_17.setValidator(MathValidator())
        self.lineEdit_17.setObjectName("Resultado utilidad bs")
        self.lineEdit_17.editingFinished.connect(lambda: self.calcular_costo(self.lineEdit_17))
        self.lineEdit_17.textChanged.connect(self.actualizar_utilidad_bs)


        self.linea_bs_line = QtWidgets.QFrame(self.tab_3)
        self.linea_bs_line.setGeometry(QtCore.QRect(127, 61, 16, 21))
        self.linea_bs_line.setFrameShape(QtWidgets.QFrame.VLine)
        self.linea_bs_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.linea_bs_line.setObjectName("linea_bs_line")

        self.linea_bs_dolar_line = QtWidgets.QFrame(self.tab_3)
        self.linea_bs_dolar_line.setGeometry(QtCore.QRect(258, 30, 16, 211))
        self.linea_bs_dolar_line.setFrameShape(QtWidgets.QFrame.VLine)
        self.linea_bs_dolar_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.linea_bs_dolar_line.setObjectName("linea_bs_dolar_line")


        self.bs_label = QtWidgets.QLabel(self.tab_3)
        self.bs_label.setGeometry(QtCore.QRect(240, 64, 21, 16))
        self.bs_label.setObjectName("bs_label")


        self.utilidad_dolar_edit = QtWidgets.QLineEdit(self.tab_3)
        self.utilidad_dolar_edit.setGeometry(QtCore.QRect(290, 60, 111, 25))
        self.utilidad_dolar_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.utilidad_dolar_edit.setValidator(MathValidator())
        self.utilidad_dolar_edit.setValidator(QDoubleValidator())
        self.utilidad_dolar_edit.editingFinished.connect(lambda: self.calcular_costo(self.utilidad_dolar_edit))
        self.utilidad_dolar_edit.textChanged.connect(self.actualizar_utilidad_bs)
        self.utilidad_dolar_edit.textChanged.connect(self.calcular_precios)


        self.precio_dolar_sin_impuesto_edit = QtWidgets.QLineEdit(self.tab_3)
        self.precio_dolar_sin_impuesto_edit.setGeometry(QtCore.QRect(290, 110, 111, 25))
        self.precio_dolar_sin_impuesto_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_dolar_sin_impuesto_edit.setValidator(QDoubleValidator())
        self.precio_dolar_sin_impuesto_edit.setValidator(MathValidator())
        regex = QRegExp("^[0-9]+([\\.,][0-9]+)?%?$")
        self.precio_dolar_sin_impuesto_edit.setObjectName("precio_dolar_sin_impuesto_edit")
        self.precio_dolar_sin_impuesto_edit.textChanged.connect(lambda: self.calcular_costo(self.precio_dolar_sin_impuesto_edit))
        self.precio_dolar_sin_impuesto_edit.textChanged.connect(self.precio_dolar_sin_impuesto_edit_changed)


        self.precio_dolar_sin_impuesto_label = QtWidgets.QLabel(self.tab_3)
        self.precio_dolar_sin_impuesto_label.setGeometry(QtCore.QRect(290, 90, 101, 16))
        self.precio_dolar_sin_impuesto_label.setObjectName("precio_dolar_sin_impuesto_label")


        self.precio_total_dolar_label = QtWidgets.QLabel(self.tab_3)
        self.precio_total_dolar_label.setGeometry(QtCore.QRect(290, 140, 61, 16))
        self.precio_total_dolar_label.setObjectName("precio_total_dolar_label")


        self.precio_total_dolar_edit = QtWidgets.QLineEdit(self.tab_3)
        self.precio_total_dolar_edit.setGeometry(QtCore.QRect(290, 160, 113, 25))
        self.precio_total_dolar_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_total_dolar_edit.setValidator(MathValidator())
        self.precio_total_dolar_edit.setObjectName("precio_total_dolar_edit")
        self.precio_total_dolar_edit.textChanged.connect(lambda: self.calcular_costo(self.precio_total_dolar_edit))
        self.precio_total_dolar_edit.textChanged.connect(self.precio_dolar_sin_impuesto_edit_changed)

        self.utilidad_dolar_label = QtWidgets.QLabel(self.tab_3)
        self.utilidad_dolar_label.setGeometry(QtCore.QRect(290, 40, 47, 13))
        self.utilidad_dolar_label.setObjectName("utilidad_dolar_label")


        self.moneda_ref_listView = QtWidgets.QListView(self.tab_3)
        self.moneda_ref_listView.setGeometry(QtCore.QRect(290, 10, 71, 25))
        self.moneda_ref_listView.setStyleSheet("QListView {\n"
        "                background-color: #1bb0b0; /* Color de fondo blanco */\n"
        "                border: 1px solid #ccc; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #ffffff; /* Color del texto negro */\n"
        "                font-weight: bold;"
        "            }")
        self.moneda_ref_list_model = QStandardItemModel(self.moneda_ref_listView)
        self.moneda_ref_listView.setModel(self.moneda_ref_list_model)

        item = QStandardItem("Dolares")
        self.moneda_ref_list_model.appendRow(item)

        self.precios_tab.addTab(self.tab_3, "")
        self.precios_tab.tabBar().setStyleSheet("""
            QTabBar::tab {
            background-color: #008080; /* Color de fondo de las pestañas */
            border: 0.5px solid #ccc; /* Borde de las pestañas */
            padding: 5px; /* Espacio entre el texto y el borde */
            color: #ffffff;
            }
            QTabBar::tab:selected {
            background-color: #1bb0b0; /* Color de fondo de la pestaña seleccionada */
            color: #ffffff; /* Color del texto de la pestaña seleccionada */
            }
        """)

        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.precio_sin_impuesto_bs_label_2 = QtWidgets.QLabel(self.tab)
        self.precio_sin_impuesto_bs_label_2.setGeometry(QtCore.QRect(10, 90, 101, 16))
        self.precio_sin_impuesto_bs_label_2.setObjectName("precio_sin_impuesto_bs_label_2")


        self.precio_sin_impuesto_bs_edit_2 = QtWidgets.QLineEdit(self.tab)
        self.precio_sin_impuesto_bs_edit_2.setGeometry(QtCore.QRect(10, 110, 111, 25))
        self.precio_sin_impuesto_bs_edit_2.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_sin_impuesto_bs_edit_2.setValidator(QDoubleValidator())
        self.precio_sin_impuesto_bs_edit_2.setValidator(MathValidator())
        self.precio_sin_impuesto_bs_edit_2.setObjectName("precio_sin_impuesto_bs_edit_2")
        self.precio_sin_impuesto_bs_edit_2.textChanged.connect(lambda: self.calcular_costo(self.precio_sin_impuesto_bs_edit_2))
        self.precio_sin_impuesto_bs_edit_2.textChanged.connect(self.precio_dolar_sin_impuesto_edit_changed_2)
        
        self.impuesto_total_bs_edit_2 = QtWidgets.QLineEdit(self.tab)
        self.impuesto_total_bs_edit_2.setGeometry(QtCore.QRect(10, 160, 111, 25))
        self.impuesto_total_bs_edit_2.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.impuesto_total_bs_edit_2.setValidator(MathValidator())
        self.impuesto_total_bs_edit_2.setObjectName("impuesto_total_bs_edit_2")
        self.impuesto_total_bs_edit_2.textChanged.connect(lambda: self.calcular_costo(self.impuesto_total_bs_edit_2))


        self.precio_total_bs_label_2 = QtWidgets.QLabel(self.tab)
        self.precio_total_bs_label_2.setGeometry(QtCore.QRect(10, 190, 61, 16))
        self.precio_total_bs_label_2.setObjectName("precio_total_bs_label_2")


        self.precio_total_bs_edit_2 = QtWidgets.QLineEdit(self.tab)
        self.precio_total_bs_edit_2.setGeometry(QtCore.QRect(10, 210, 113, 25))
        self.precio_total_bs_edit_2.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_total_bs_edit_2.setValidator(MathValidator())
        self.precio_total_bs_edit_2.setObjectName("precio_total_bs_edit_2")
        self.precio_total_bs_edit_2.textChanged.connect(lambda: self.calcular_costo(self.precio_total_bs_edit_2))


        self.bs_label_2 = QtWidgets.QLabel(self.tab)
        self.bs_label_2.setGeometry(QtCore.QRect(240, 64, 21, 16))
        self.bs_label_2.setObjectName("bs_label_2")


        self.utilidad_bs_edit_2 = QtWidgets.QLineEdit(self.tab)
        self.utilidad_bs_edit_2.setGeometry(QtCore.QRect(10, 60, 111, 25))
        self.utilidad_bs_edit_2.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.utilidad_bs_edit_2.setValidator(MathValidator())


        self.linea_bs_dolar_line_2 = QtWidgets.QFrame(self.tab)
        self.linea_bs_dolar_line_2.setGeometry(QtCore.QRect(258, 30, 16, 211))
        self.linea_bs_dolar_line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.linea_bs_dolar_line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.linea_bs_dolar_line_2.setObjectName("linea_bs_dolar_line_2")


        self.linea_bs_line_2 = QtWidgets.QFrame(self.tab)
        self.linea_bs_line_2.setGeometry(QtCore.QRect(127, 61, 16, 21))
        self.linea_bs_line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.linea_bs_line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.linea_bs_line_2.setObjectName("linea_bs_line_2")


        self.precio_total_dolar_edit_2 = QtWidgets.QLineEdit(self.tab)
        self.precio_total_dolar_edit_2.setGeometry(QtCore.QRect(290, 160, 113, 25))
        self.precio_total_dolar_edit_2.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_total_dolar_edit_2.setValidator(MathValidator())
        self.precio_total_dolar_edit_2.setObjectName("precio_total_dolar_edit_2")
        self.precio_total_dolar_edit_2.textChanged.connect(lambda: self.calcular_costo(self.precio_total_dolar_edit_2))

        
        self.precio_dolar_sin_impuesto_label_2 = QtWidgets.QLabel(self.tab)
        self.precio_dolar_sin_impuesto_label_2.setGeometry(QtCore.QRect(290, 90, 101, 16))
        self.precio_dolar_sin_impuesto_label_2.setObjectName("precio_dolar_sin_impuesto_label_2")


        self.lineEdit_18 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_18.setGeometry(QtCore.QRect(144, 60, 91, 25))
        self.lineEdit_18.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.lineEdit_18.setValidator(MathValidator())
        self.lineEdit_18.setObjectName("lineEdit_18")
        self.lineEdit_18.textChanged.connect(lambda: self.calcular_costo(self.lineEdit_18))


        self.utilidad_bs_label_2 = QtWidgets.QLabel(self.tab)
        self.utilidad_bs_label_2.setGeometry(QtCore.QRect(10, 40, 47, 13))
        self.utilidad_bs_label_2.setObjectName("utilidad_bs_label_2")


        self.impuesto_total_bs_label_2 = QtWidgets.QLabel(self.tab)
        self.impuesto_total_bs_label_2.setGeometry(QtCore.QRect(10, 140, 81, 16))
        self.impuesto_total_bs_label_2.setObjectName("impuesto_total_bs_label_2")


        self.moneda_listView_2 = QtWidgets.QListView(self.tab)
        self.moneda_listView_2.setGeometry(QtCore.QRect(11, 10, 71, 25))
        self.moneda_listView_2.setStyleSheet("QListView {\n"
        "                background-color: #1bb0b0; /* Color de fondo */\n"
        "                border: 1px solid #ccc; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #ffffff; /* Color del texto blanco */\n"
        "                font-weight: bold;\n"
        "            }")
        self.moneda_list2_model = QStandardItemModel(self.moneda_listView_2)
        self.moneda_listView_2.setModel(self.moneda_list2_model)

        item = QStandardItem("Bolivares")
        self.moneda_list2_model.appendRow(item)


        self.precio_dolar_sin_impuesto_edit_2 = QtWidgets.QLineEdit(self.tab)
        self.precio_dolar_sin_impuesto_edit_2.setGeometry(QtCore.QRect(290, 110, 111, 25))
        self.precio_dolar_sin_impuesto_edit_2.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_dolar_sin_impuesto_edit_2.setValidator(MathValidator())
        self.precio_dolar_sin_impuesto_edit_2.setObjectName("precio_dolar_sin_impuesto_edit_2")
        self.precio_dolar_sin_impuesto_edit_2.textChanged.connect(lambda: self.calcular_costo(self.precio_dolar_sin_impuesto_edit_2))
        self.precio_dolar_sin_impuesto_edit_2.textChanged.connect(self.precio_dolar_sin_impuesto_edit_changed_2)

        self.moneda_ref_listView_2 = QtWidgets.QListView(self.tab)
        self.moneda_ref_listView_2.setGeometry(QtCore.QRect(290, 10, 71, 25))
        self.moneda_ref_listView_2.setStyleSheet("QListView {\n"
        "                background-color: #1bb0b0; /* Color de fondo blanco */\n"
        "                border: 1px solid #ccc; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #ffffff; /* Color del texto negro */\n"
        "                font-weight: bold;"
        "            }")
        self.moneda_ref_list2_model = QStandardItemModel(self.moneda_ref_listView_2)
        self.moneda_ref_listView_2.setModel(self.moneda_ref_list2_model)

        item = QStandardItem("Dolares")
        self.moneda_ref_list2_model.appendRow(item)


        self.precio_total_dolar_label_2 = QtWidgets.QLabel(self.tab)
        self.precio_total_dolar_label_2.setGeometry(QtCore.QRect(290, 140, 61, 16))
        self.precio_total_dolar_label_2.setObjectName("precio_total_dolar_label_2")


        self.utilidad_dolar_edit_2 = QtWidgets.QLineEdit(self.tab)
        self.utilidad_dolar_edit_2.setGeometry(QtCore.QRect(290, 60, 111, 25))
        self.utilidad_dolar_edit_2.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.utilidad_dolar_edit_2.setValidator(MathValidator())
        self.utilidad_dolar_edit_2.setValidator(QDoubleValidator())
        regex = QRegExp("^[0-9]+([\\.,][0-9]+)?%?$")
        self.utilidad_dolar_edit_2.setValidator(QRegExpValidator(regex))
        self.utilidad_dolar_edit_2.editingFinished.connect(lambda: self.calcular_costo(self.utilidad_dolar_edit_2))
        self.utilidad_dolar_edit_2.textChanged.connect(self.actualizar_utilidad_bs_2)
        self.utilidad_dolar_edit_2.textChanged.connect(self.calcular_precios_2)


        self.utilidad_dolar_label_2 = QtWidgets.QLabel(self.tab)
        self.utilidad_dolar_label_2.setGeometry(QtCore.QRect(290, 40, 47, 13))
        self.utilidad_dolar_label_2.setObjectName("utilidad_dolar_label_2")

        self.precios_tab.addTab(self.tab, "")

        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")


        self.precio_sin_impuesto_bs_label_3 = QtWidgets.QLabel(self.tab_2)
        self.precio_sin_impuesto_bs_label_3.setGeometry(QtCore.QRect(10, 90, 101, 16))
        self.precio_sin_impuesto_bs_label_3.setObjectName("precio_sin_impuesto_bs_label_3")


        self.impuesto_total_bs_edit_3 = QtWidgets.QLineEdit(self.tab_2)
        self.impuesto_total_bs_edit_3.setGeometry(QtCore.QRect(10, 160, 111, 25))
        self.impuesto_total_bs_edit_3.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.impuesto_total_bs_edit_3.setValidator(MathValidator())
        self.impuesto_total_bs_edit_3.setObjectName("impuesto_total_bs_edit_3")
        self.impuesto_total_bs_edit_3.textChanged.connect(lambda: self.calcular_costo(self.impuesto_total_bs_edit_3))
        self.impuesto_total_bs_edit_3.textChanged.connect(self.actualizar_utilidad_bs_3)


        self.utilidad_dolar_edit_3 = QtWidgets.QLineEdit(self.tab_2)
        self.utilidad_dolar_edit_3.setGeometry(QtCore.QRect(290, 60, 111, 25))
        self.utilidad_dolar_edit_3.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.utilidad_dolar_edit_3.setValidator(MathValidator())
        self.utilidad_dolar_edit_3.setValidator(QDoubleValidator())
        regex = QRegExp("^[0-9]+([\\.,][0-9]+)?%?$")
        self.utilidad_dolar_edit_3.setValidator(QRegExpValidator(regex))
        self.utilidad_dolar_edit_3.textChanged.connect(self.calcular_precios_3)
        self.utilidad_dolar_edit_3.textChanged.connect(self.actualizar_utilidad_bs_3)


        self.precio_sin_impuesto_bs_edit_3 = QtWidgets.QLineEdit(self.tab_2)
        self.precio_sin_impuesto_bs_edit_3.setGeometry(QtCore.QRect(10, 110, 111, 25))
        self.precio_sin_impuesto_bs_edit_3.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_sin_impuesto_bs_edit_3.setValidator(MathValidator())
        self.precio_sin_impuesto_bs_edit_3.setObjectName("precio_sin_impuesto_bs_edit_3")
        self.precio_sin_impuesto_bs_edit_3.textChanged.connect(lambda: self.calcular_costo(self.precio_sin_impuesto_bs_edit_3))
        self.precio_sin_impuesto_bs_edit_3.textChanged.connect(self.precio_dolar_sin_impuesto_edit_changed_3)


        self.linea_bs_line_3 = QtWidgets.QFrame(self.tab_2)
        self.linea_bs_line_3.setGeometry(QtCore.QRect(127, 61, 16, 21))
        self.linea_bs_line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.linea_bs_line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.linea_bs_line_3.setObjectName("linea_bs_line_3")


        self.utilidad_dolar_label_3 = QtWidgets.QLabel(self.tab_2)
        self.utilidad_dolar_label_3.setGeometry(QtCore.QRect(290, 40, 47, 13))
        self.utilidad_dolar_label_3.setObjectName("utilidad_dolar_label_3")


        self.precio_total_dolar_edit_3 = QtWidgets.QLineEdit(self.tab_2)
        self.precio_total_dolar_edit_3.setGeometry(QtCore.QRect(290, 160, 113, 25))
        self.precio_total_dolar_edit_3.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_total_dolar_edit_3.setValidator(MathValidator())
        self.precio_total_dolar_edit_3.setObjectName("precio_total_dolar_edit_3")
        self.precio_total_dolar_edit_3.textChanged.connect(lambda: self.calcular_costo(self.precio_total_dolar_edit_3))
        self.precio_total_dolar_edit_3.textChanged.connect(self.precio_dolar_sin_impuesto_edit_changed_3)
        


        self.precio_total_dolar_label_3 = QtWidgets.QLabel(self.tab_2)
        self.precio_total_dolar_label_3.setGeometry(QtCore.QRect(290, 140, 61, 16))
        self.precio_total_dolar_label_3.setObjectName("precio_total_dolar_label_3")


        self.lineEdit_19 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_19.setGeometry(QtCore.QRect(144, 60, 91, 25))
        self.lineEdit_19.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.lineEdit_19.setValidator(MathValidator())
        self.lineEdit_19.textChanged.connect(lambda: self.calcular_costo(self.lineEdit_19))
        self.lineEdit_19.textChanged.connect(self.actualizar_utilidad_bs_3)


        self.precio_total_bs_edit_3 = QtWidgets.QLineEdit(self.tab_2)
        self.precio_total_bs_edit_3.setGeometry(QtCore.QRect(10, 210, 113, 25))
        self.precio_total_bs_edit_3.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_total_bs_edit_3.setValidator(MathValidator())
        self.precio_total_bs_edit_3.textChanged.connect(lambda: self.calcular_costo(self.precio_total_bs_edit_3))
        self.precio_total_bs_edit_3.textChanged.connect(self.actualizar_utilidad_bs_3)


        self.utilidad_bs_edit_3 = QtWidgets.QLineEdit(self.tab_2)
        self.utilidad_bs_edit_3.setGeometry(QtCore.QRect(10, 60, 111, 25))
        self.utilidad_bs_edit_3.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.utilidad_bs_edit_3.setValidator(MathValidator())
        self.utilidad_bs_edit_3.textChanged.connect(self.actualizar_utilidad_bs_3)


        self.linea_bs_dolar_line_3 = QtWidgets.QFrame(self.tab_2)
        self.linea_bs_dolar_line_3.setGeometry(QtCore.QRect(258, 30, 16, 211))
        self.linea_bs_dolar_line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.linea_bs_dolar_line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.linea_bs_dolar_line_3.setObjectName("linea_bs_dolar_line_3")


        self.precio_dolar_sin_impuesto_label_3 = QtWidgets.QLabel(self.tab_2)
        self.precio_dolar_sin_impuesto_label_3.setGeometry(QtCore.QRect(290, 90, 101, 16))
        self.precio_dolar_sin_impuesto_label_3.setObjectName("precio_dolar_sin_impuesto_label_3")


        self.precio_total_bs_label_3 = QtWidgets.QLabel(self.tab_2)
        self.precio_total_bs_label_3.setGeometry(QtCore.QRect(10, 190, 61, 16))
        self.precio_total_bs_label_3.setObjectName("precio_total_bs_label_3")


        self.impuesto_total_bs_label_3 = QtWidgets.QLabel(self.tab_2)
        self.impuesto_total_bs_label_3.setGeometry(QtCore.QRect(10, 140, 81, 16))
        self.impuesto_total_bs_label_3.setObjectName("impuesto_total_bs_label_3")


        self.precio_dolar_sin_impuesto_edit_3 = QtWidgets.QLineEdit(self.tab_2)
        self.precio_dolar_sin_impuesto_edit_3.setGeometry(QtCore.QRect(290, 110, 111, 25))
        self.precio_dolar_sin_impuesto_edit_3.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.precio_dolar_sin_impuesto_edit_3.setValidator(MathValidator())
        self.precio_dolar_sin_impuesto_edit_3.setObjectName("precio_dolar_sin_impuesto_edit_3")
        self.precio_dolar_sin_impuesto_edit_3.textChanged.connect(lambda: self.calcular_costo(self.precio_dolar_sin_impuesto_edit_3))
        self.precio_dolar_sin_impuesto_edit_3.textChanged.connect(self.precio_dolar_sin_impuesto_edit_changed_3)

        self.moneda_ref_listView_3 = QtWidgets.QListView(self.tab_2)
        self.moneda_ref_listView_3.setGeometry(QtCore.QRect(290, 10, 71, 25))
        self.moneda_ref_listView_3.setStyleSheet("QListView {\n"
        "                background-color: #1bb0b0; /* Color de fondo blanco */\n"
        "                border: 1px solid #ccc; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #ffffff; /* Color del texto negro */\n"
        "                font-weight: bold;"
        "            }")
        self.moneda_ref_list3_model = QStandardItemModel(self.moneda_ref_listView_3)
        self.moneda_ref_listView_3.setModel(self.moneda_ref_list3_model)

        item = QStandardItem("Dolares")
        self.moneda_ref_list3_model.appendRow(item)


        self.moneda_listView_3 = QtWidgets.QListView(self.tab_2)
        self.moneda_listView_3.setGeometry(QtCore.QRect(11, 10, 71, 25))
        self.moneda_listView_3.setStyleSheet("QListView {\n"
        "                background-color: #1bb0b0; /* Color de fondo */\n"
        "                border: 1px solid #ccc; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #ffffff; /* Color del texto negro */\n"
        "                font-weight: bold;\n"
        "            }")
        self.moneda_list3_model = QStandardItemModel(self.moneda_listView_3)
        self.moneda_listView_3.setModel(self.moneda_list3_model)

        item = QStandardItem("Bolivares")
        self.moneda_list3_model.appendRow(item)


        self.utilidad_bs_label_3 = QtWidgets.QLabel(self.tab_2)
        self.utilidad_bs_label_3.setGeometry(QtCore.QRect(10, 40, 47, 13))
        self.utilidad_bs_label_3.setObjectName("utilidad_bs_label_3")

        self.bs_label_3 = QtWidgets.QLabel(self.tab_2)
        self.bs_label_3.setGeometry(QtCore.QRect(240, 64, 21, 16))
        self.bs_label_3.setObjectName("bs_label_3")

        self.precios_tab.addTab(self.tab_2, "")

        self.activo_checkBox = QtWidgets.QCheckBox(self.tab_6)
        self.activo_checkBox.setGeometry(QtCore.QRect(310, 174, 80, 20))
        self.activo_checkBox.setStyleSheet("""
            QCheckBox {  
                border: none; 
                border-radius: 5px; 
                padding: 5px;
                color: #000000 
            }
            QCheckBox::indicator {
                width: 17px; /* Ancho del indicador */
                height: 17px; /* Alto del indicador */
                border: 1px solid #ccc; /* Borde del indicador */
                border-radius: 5px; /* Radio del borde del indicador */
                background-color: #fff; /* Color de fondo del indicador */
            }
            QCheckBox::indicator:checked {
                background-color: #1bb0b0; /* Color de fondo del indicador cuando se selecciona */
            }
        """)
        self.activo_checkBox.stateChanged.connect(self.cambiar_estado_activo)

        self.table_productos = QtWidgets.QTableWidget(self.tab_6)
        self.table_productos.setGeometry(QtCore.QRect(10, 390, 1071, 361))
        self.table_productos.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table_productos.setStyleSheet("""
            QTableWidget::item:selected {
                background-color: #1bb0b0; /* Color de fondo de la fila seleccionada */
                color: #ffffff; /* Color del texto de la fila seleccionada */
            }
            QHeaderView::section::hover {
                background-color: #1bb0b0; /* Color cuando se coloca el cursor sobre el encabezado */
                border: 5px;
                color: #ffffff;
            }
        """)
        self.table_productos.selectionModel().selectionChanged.connect(self.habilitar_eliminar)
        self.table_productos.selectionModel().selectionChanged.connect(self.mostrar_imagen_producto)

        self.table_productos.setColumnCount(6)
        self.table_productos.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table_productos.setHorizontalHeaderItem(0, item)
        self.table_productos.setColumnWidth(0, 120)
        item = QtWidgets.QTableWidgetItem()
        self.table_productos.setHorizontalHeaderItem(1, item)
        self.table_productos.setColumnWidth(1, 569)  # Establece el ancho de la columna "Descripción" en 300 píxeles
        item = QtWidgets.QTableWidgetItem()
        self.table_productos.setHorizontalHeaderItem(2, item)
        self.table_productos.setColumnWidth(2, 120)
        item = QtWidgets.QTableWidgetItem()
        self.table_productos.setHorizontalHeaderItem(3, item)
        self.table_productos.setColumnWidth(3, 60)
        item = QtWidgets.QTableWidgetItem()
        self.table_productos.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_productos.setHorizontalHeaderItem(5, item)

        self.peso_litro_label = QtWidgets.QLabel(self.tab_6)
        self.peso_litro_label.setGeometry(QtCore.QRect(217, 114, 47, 13))
        self.peso_litro_label.setObjectName("peso_litro_label")

        self.peso_litro_edit = QtWidgets.QLineEdit(self.tab_6)
        self.peso_litro_edit.setGeometry(QtCore.QRect(217, 128, 71, 25))
        self.peso_litro_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.peso_litro_edit.setObjectName("Peso/Litro")


        self.existencia_actual_label = QtWidgets.QLabel(self.tab_6)
        self.existencia_actual_label.setGeometry(QtCore.QRect(12, 154, 91, 16))
        self.existencia_actual_label.setObjectName("existencia_actual_label")


        self.existencia_actual_edit = QtWidgets.QLineEdit(self.tab_6)
        self.existencia_actual_edit.setGeometry(QtCore.QRect(12, 170, 81, 25))
        self.existencia_actual_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.existencia_actual_edit.setObjectName("existencia_actual_edit")


        self.existencia_maxima_edit = QtWidgets.QLineEdit(self.tab_6)
        self.existencia_maxima_edit.setGeometry(QtCore.QRect(218, 170, 81, 25))
        self.existencia_maxima_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.existencia_maxima_edit.setValidator(QIntValidator()) # Establece el validador de enteros
        self.existencia_maxima_edit.setObjectName("existencia_maxima_edit")


        self.existencia_maxima_label = QtWidgets.QLabel(self.tab_6)
        self.existencia_maxima_label.setGeometry(QtCore.QRect(220, 154, 81, 16))
        self.existencia_maxima_label.setObjectName("existencia_maxima_label")


        self.existencia_minima_edit = QtWidgets.QLineEdit(self.tab_6)
        self.existencia_minima_edit.setGeometry(QtCore.QRect(120, 170, 81, 25))
        self.existencia_minima_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.existencia_minima_edit.setValidator(QIntValidator()) # Establece el validador de enteros
        self.existencia_minima_edit.setObjectName("existencia_minima_edit")


        self.existencia_minima_label = QtWidgets.QLabel(self.tab_6)
        self.existencia_minima_label.setGeometry(QtCore.QRect(120, 154, 91, 16))
        self.existencia_minima_label.setObjectName("existencia_minima_label")


        self.codigo_barra_edit = QtWidgets.QLineEdit(self.tab_6)
        self.codigo_barra_edit.setGeometry(QtCore.QRect(315, 128, 111, 25))
        self.codigo_barra_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.codigo_barra_edit.setText("")
        self.codigo_barra_edit.setObjectName("codigo_barra_edit")


        self.codigo_barra_label = QtWidgets.QLabel(self.tab_6)
        self.codigo_barra_label.setGeometry(QtCore.QRect(315, 112, 81, 16))
        self.codigo_barra_label.setObjectName("codigo_barra_label")


        self.buscar_producto_edit = QtWidgets.QLineEdit(self.tab_6)
        self.buscar_producto_edit.setGeometry(QtCore.QRect(10, 353, 271, 25))
        self.buscar_producto_edit.setStyleSheet("QLineEdit {\n"
        "                background-color: #ffffff; /* Color de fondo blanco */\n"
        "                border: 1px solid #6b797e; /* Borde gris claro */\n"
        "                border-radius: 5px; /* Radio del borde */\n"
        "                padding: 5px; /* Relleno */\n"
        "                color: #000000; /* Color del texto negro */\n"
        "            }")
        self.buscar_producto_edit.setText("")
        self.buscar_producto_edit.setPlaceholderText("Buscar producto")
    


        self.imagen_producto_label = QtWidgets.QLabel(self.tab_6)
        self.imagen_producto_label.setGeometry(QtCore.QRect(940, 24, 101, 16))


        self.button_anadir = QtWidgets.QPushButton(self.tab_6)
        self.button_anadir.setGeometry(QtCore.QRect(925, 245, 61, 31))
        self.button_anadir.setStyleSheet("QPushButton {\n"
        "                background-color: #008080; \n"
        "                color: #fff; \n"
        "                border: none; \n"
        "                border-radius: 5px; \n"
        "                padding: 10px;\n"
        "            }\n"
        "            QPushButton:hover {\n"
        "                background-color: #1bb0b0; /* Color cuando se coloca el cursor sobre el botón */\n"
        "            }\n"
        "            QPushButton:pressed {\n"
        "                background-color: #00698f; /* Color cuando se presiona el botón */\n"
        "            }\n"
        "            QPushButton:disabled {\n"
        "                background-color: #ccc; /* Color cuando el botón está deshabilitado */\n"
        "            }")
        self.button_anadir.clicked.connect(self.seleccionar_imagen)

        self.button_borrar = QtWidgets.QPushButton(self.tab_6)
        self.button_borrar.setGeometry(QtCore.QRect(990, 245, 61, 31))
        self.button_borrar.setStyleSheet("QPushButton {\n"
        "                background-color: #008080; \n"
        "                color: #fff; \n"
        "                border: none; \n"
        "                border-radius: 5px; \n"
        "                padding: 10px;\n"
        "            }\n"
        "            QPushButton:hover {\n"
        "                background-color: #1bb0b0; /* Color cuando se coloca el cursor sobre el botón */\n"
        "            }\n"
        "            QPushButton:pressed {\n"
        "                background-color: #00698f; /* Color cuando se presiona el botón */\n"
        "            }\n"
        "            QPushButton:disabled {\n"
        "                background-color: #ccc; /* Color cuando el botón está deshabilitado */\n"
        "            }")
        self.button_borrar.clicked.connect(self.borrar_imagen)


        self.button_ultimas_transacciones = QtWidgets.QPushButton(self.tab_6)
        self.button_ultimas_transacciones.setGeometry(QtCore.QRect(921, 350, 150, 32))
        self.button_ultimas_transacciones.setStyleSheet("QPushButton {\n"
        "                background-color: #008080; \n"
        "                color: #fff; \n"
        "                border: none; \n"
        "                border-radius: 5px; \n"
        "                padding: 10px;\n"
        "            }\n"
        "            QPushButton:hover {\n"
        "                background-color: #1bb0b0; /* Color cuando se coloca el cursor sobre el botón */\n"
        "            }\n"
        "            QPushButton:pressed {\n"
        "                background-color: #00698f; /* Color cuando se presiona el botón */\n"
        "            }\n"
        "            QPushButton:disabled {\n"
        "                background-color: #ccc; /* Color cuando el botón está deshabilitado */\n"
        "            }")
        self.button_ultimas_transacciones.setObjectName("button_ultimas_transacciones")

        self.tab_widget.addTab(self.tab_6, "")


        self.button_cerrar = QtWidgets.QPushButton(self.centralwidget)
        self.button_cerrar.setGeometry(QtCore.QRect(1010, 800, 75, 31))
        self.button_cerrar.setStyleSheet("QPushButton {\n"
        "                background-color: #008080; \n"
        "                color: #fff; \n"
        "                border: none; \n"
        "                border-radius: 5px; \n"
        "                padding: 10px;\n"
        "            }\n"
        "            QPushButton:hover {\n"
        "                background-color: #ef0404; /* Color cuando se coloca el cursor sobre el botón */\n"
        "            }\n"
        "            QPushButton:pressed {\n"
        "                background-color: #af0000; /* Color cuando se presiona el botón */\n"
        "            }\n"
        "            QPushButton:disabled {\n"
        "                background-color: #ccc; /* Color cuando el botón está deshabilitado */\n"
        "            }")
        self.button_cerrar.setObjectName("button_cerrar")
        self.button_cerrar.clicked.connect(MainWindow.close)  # Conecta el botón a la función close()

        # Crea el botón de cancelar
        self.button_cancelar = QtWidgets.QPushButton(self.centralwidget)
        self.button_cancelar.setGeometry(QtCore.QRect(920, 800, 75, 31))
        self.button_cancelar.setText("Cancelar")
        self.button_cancelar.setStyleSheet("QPushButton {\n"
        "                background-color: #008080; \n"
        "                color: #fff; \n"
        "                border: none; \n"
        "                border-radius: 5px; \n"
        "                padding: 10px;\n"
        "            }\n"
        "            QPushButton:hover {\n"
        "                background-color: #1bb0b0; /* Color cuando se coloca el cursor sobre el botón */\n"
        "            }\n"
        "            QPushButton:pressed {\n"
        "                background-color: #00698f; /* Color cuando se presiona el botón */\n"
        "            }\n"
        "            QPushButton:disabled {\n"
        "                background-color: #ccc; /* Color cuando el botón está deshabilitado */\n"
        "            }")
        self.button_cancelar.clicked.connect(self.cancelar)

        self.button_modificar = QtWidgets.QPushButton(self.centralwidget)
        self.button_modificar.setGeometry(QtCore.QRect(739, 799, 75, 31))
        self.button_modificar.setStyleSheet("QPushButton {\n"
        "                background-color: #008080; \n"
        "                color: #fff; \n"
        "                border: none; \n"
        "                border-radius: 5px; \n"
        "                padding: 10px;\n"
        "            }\n"
        "            QPushButton:hover {\n"
        "                background-color: #1bb0b0; /* Color cuando se coloca el cursor sobre el botón */\n"
        "            }\n"
        "            QPushButton:pressed {\n"
        "                background-color: #00698f; /* Color cuando se presiona el botón */\n"
        "            }\n"
        "            QPushButton:disabled {\n"
        "                background-color: #ccc; /* Color cuando el botón está deshabilitado */\n"
        "            }")
        self.button_modificar.clicked.connect(self.modificar_producto)


        self.button_crear = QtWidgets.QPushButton(self.centralwidget)
        self.button_crear.setGeometry(QtCore.QRect(650, 799, 75, 31))
        self.button_crear.setStyleSheet("QPushButton {\n"
        "                background-color: #008080; \n"
        "                color: #fff; \n"
        "                border: none; \n"
        "                border-radius: 5px; \n"
        "                padding: 10px;\n"
        "            }\n"
        "            QPushButton:hover {\n"
        "                background-color: #1bb0b0; /* Color cuando se coloca el cursor sobre el botón */\n"
        "            }\n"
        "            QPushButton:pressed {\n"
        "                background-color: #00698f; /* Color cuando se presiona el botón */\n"
        "            }\n"
        "            QPushButton:disabled {\n"
        "                background-color: #ccc; /* Color cuando el botón está deshabilitado */\n"
        "            }")
        self.button_crear.setObjectName("button_crear")

        # Conecta el botón "Crear" a la función habilitar_campos
        self.button_crear.clicked.connect(self.habilitar_campos)

        self.button_delete = QtWidgets.QPushButton(self.centralwidget)
        self.button_delete.setGeometry(QtCore.QRect(830, 800, 75, 31))
        self.button_delete.setStyleSheet("QPushButton {\n"
        "                background-color: #008080; \n"
        "                color: #fff; \n"
        "                border: none; \n"
        "                border-radius: 5px; \n"
        "                padding: 10px;\n"
        "            }\n"
        "            QPushButton:hover {\n"
        "                background-color: #1bb0b0; /* Color cuando se coloca el cursor sobre el botón */\n"
        "            }\n"
        "            QPushButton:pressed {\n"
        "                background-color: #00698f; /* Color cuando se presiona el botón */\n"
        "            }\n"
        "            QPushButton:disabled {\n"
        "                background-color: #ccc; /* Color cuando el botón está deshabilitado */\n"
        "            }")
        self.button_delete.clicked.connect(self.eliminar_producto)


        self.tab_widget.raise_()
        self.codigo_edit.raise_()
        self.codigo_label.raise_()
        self.descripcion_label.raise_()
        self.descripcion_edit.raise_()
        self.marca_comboBox.raise_()
        self.marca_label.raise_()
        self.linea_comboBox.raise_()
        self.linea_label.raise_()
        self.unidad_label.raise_()
        self.unidad_edit.raise_()
        self.paquete_label.raise_()
        self.paquete_edit.raise_()
        self.costo_moneda_local_groupBox.raise_()
        self.costo_moneda_referencial_groupBox.raise_()
        self.button_cerrar.raise_()
        self.button_modificar.raise_()
        self.button_crear.raise_()
        self.button_delete.raise_()
        self.button_cancelar.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        self.tab_widget.setCurrentIndex(0)
        self.precios_tab.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Deshabilita los campos de entrada
        self.codigo_edit.setDisabled(True)
        self.descripcion_edit.setDisabled(True)
        self.unidad_edit.setDisabled(True)
        self.paquete_edit.setDisabled(True)
        self.costo_anterior_edit.setDisabled(True)
        self.costo_actual_edit.setDisabled(True)
        self.costo_promedio_edit.setDisabled(True)
        self.costo_reposicion_edit.setDisabled(True)
        self.moneda_referencial_edit.setDisabled(True)
        self.costo_actual_referencial_edit.setDisabled(True)
        self.utilidad_bs_edit.setDisabled(True)
        self.precio_sin_impuesto_bs_edit.setDisabled(True)
        self.impuesto_total_bs_edit.setDisabled(True)
        self.precio_total_bs_edit.setDisabled(True)
        self.lineEdit_17.setDisabled(True)
        self.utilidad_dolar_edit.setDisabled(True)
        self.precio_dolar_sin_impuesto_edit.setDisabled(True)
        self.precio_total_dolar_edit.setDisabled(True)
        self.utilidad_bs_edit_2.setDisabled(True)
        self.precio_sin_impuesto_bs_edit_2.setDisabled(True)
        self.impuesto_total_bs_edit_2.setDisabled(True)
        self.precio_total_bs_edit_2.setDisabled(True)
        self.lineEdit_18.setDisabled(True)
        self.utilidad_dolar_edit_2.setDisabled(True)
        self.precio_dolar_sin_impuesto_edit_2.setDisabled(True)
        self.precio_total_dolar_edit_2.setDisabled(True)
        self.utilidad_bs_edit_3.setDisabled(True)
        self.precio_sin_impuesto_bs_edit_3.setDisabled(True)
        self.impuesto_total_bs_edit_3.setDisabled(True)
        self.precio_total_bs_edit_3.setDisabled(True)
        self.lineEdit_19.setDisabled(True)
        self.utilidad_dolar_edit_3.setDisabled(True)
        self.precio_dolar_sin_impuesto_edit_3.setDisabled(True)
        self.precio_total_dolar_edit_3.setDisabled(True)
        self.peso_litro_edit.setDisabled(True)
        self.existencia_actual_edit.setDisabled(True)
        self.existencia_maxima_edit.setDisabled(True)
        self.existencia_minima_edit.setDisabled(True)
        self.codigo_barra_edit.setDisabled(True)
        self.moneda_listView.setDisabled(True)
        self.moneda_ref_listView.setDisabled(True)

        # Deshabilita los QComboBox
        self.marca_comboBox.setDisabled(True)
        self.linea_comboBox.setDisabled(True)

        # Deshabilita los checkbox
        self.activo_checkBox.setDisabled(True)

        # Deshabilita los botones "Añadir" y "Borrar"
        self.button_anadir.setDisabled(True)
        self.button_borrar.setDisabled(True)
        self.button_modificar.setDisabled(True)
        self.button_delete.setDisabled(True)
        self.button_cancelar.setDisabled(True)

        # Agrega estas líneas al final del método setupUi
        self.timer = QTimer()
        self.timer.timeout.connect(self.actualizar_barra_estado)
        self.timer.start(1000)  # Actualiza cada segundo

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Crear Productos"))
        MainWindow.setWindowIcon(QIcon('icono.png'))  # Agrega el icono a la ventana
        self.codigo_label.setText(_translate("MainWindow", "Código"))
        self.descripcion_label.setText(_translate("MainWindow", "Descripción"))
        self.marca_label.setText(_translate("MainWindow", "Marca"))
        self.linea_label.setText(_translate("MainWindow", "Linea de Productos"))
        self.unidad_label.setText(_translate("MainWindow", "Unidad"))
        self.paquete_label.setText(_translate("MainWindow", "Paquete"))
        self.costo_moneda_local_groupBox.setTitle(_translate("MainWindow", "Costo Moneda Local"))
        self.costo_anterior_label.setText(_translate("MainWindow", "Costo Anterior"))
        self.costo_actual_label.setText(_translate("MainWindow", "Costo Actual"))
        self.costo_promedio_label.setText(_translate("MainWindow", "Costo Promedio"))
        self.costo_reposicion_label.setText(_translate("MainWindow", "Costo Reposición"))
        self.costo_moneda_referencial_groupBox.setTitle(_translate("MainWindow", "Costo Moneda Referencial"))
        self.moneda_referencial_label.setText(_translate("MainWindow", "Moneda Referencial"))
        self.costo_actual_referencial_label.setText(_translate("MainWindow", "Costo Actual"))
        self.utilidad_bs_label.setText(_translate("MainWindow", "Utilidad"))
        self.precio_sin_impuesto_bs_label.setText(_translate("MainWindow", "Precio sin Impuesto"))
        self.impuesto_total_bs_label.setText(_translate("MainWindow", "Impuesto Total"))
        self.precio_total_bs_label.setText(_translate("MainWindow", "Precio Total"))
        self.bs_label.setText(_translate("MainWindow", "Bs."))
        self.precio_dolar_sin_impuesto_label.setText(_translate("MainWindow", "Precio sin Impuesto"))
        self.precio_total_dolar_label.setText(_translate("MainWindow", "Precio Total"))
        self.utilidad_dolar_label.setText(_translate("MainWindow", "Utilidad"))
        self.precios_tab.setTabText(self.precios_tab.indexOf(self.tab_3), _translate("MainWindow", "Precio 1"))
        self.precio_sin_impuesto_bs_label_2.setText(_translate("MainWindow", "Precio sin Impuesto"))
        self.precio_total_bs_label_2.setText(_translate("MainWindow", "Precio Total"))
        self.bs_label_2.setText(_translate("MainWindow", "Bs."))
        self.precio_dolar_sin_impuesto_label_2.setText(_translate("MainWindow", "Precio sin Impuesto"))
        self.utilidad_bs_label_2.setText(_translate("MainWindow", "Utilidad"))
        self.impuesto_total_bs_label_2.setText(_translate("MainWindow", "Impuesto Total"))
        self.precio_total_dolar_label_2.setText(_translate("MainWindow", "Precio Total"))
        self.utilidad_dolar_label_2.setText(_translate("MainWindow", "Utilidad"))
        self.precios_tab.setTabText(self.precios_tab.indexOf(self.tab), _translate("MainWindow", "Precio 2"))
        self.precio_sin_impuesto_bs_label_3.setText(_translate("MainWindow", "Precio sin Impuesto"))
        self.utilidad_dolar_label_3.setText(_translate("MainWindow", "Utilidad"))
        self.precio_total_dolar_label_3.setText(_translate("MainWindow", "Precio Total"))
        self.precio_dolar_sin_impuesto_label_3.setText(_translate("MainWindow", "Precio sin Impuesto"))
        self.precio_total_bs_label_3.setText(_translate("MainWindow", "Precio Total"))
        self.impuesto_total_bs_label_3.setText(_translate("MainWindow", "Impuesto Total"))
        self.utilidad_bs_label_3.setText(_translate("MainWindow", "Utilidad"))
        self.bs_label_3.setText(_translate("MainWindow", "Bs."))
        self.precios_tab.setTabText(self.precios_tab.indexOf(self.tab_2), _translate("MainWindow", "Precio 3"))
        self.activo_checkBox.setText(_translate("MainWindow", "Activo"))
        item = self.table_productos.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Código"))
        item = self.table_productos.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Descripción"))
        item = self.table_productos.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Marca"))
        item = self.table_productos.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Existencia"))
        item = self.table_productos.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Costo Bs."))
        item = self.table_productos.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Costo $"))
        self.peso_litro_label.setText(_translate("MainWindow", "Peso/Litro"))
        self.existencia_actual_label.setText(_translate("MainWindow", "Existencia Actual"))
        self.existencia_maxima_label.setText(_translate("MainWindow", "Existencia Max."))
        self.existencia_minima_label.setText(_translate("MainWindow", "Existencia Min."))
        self.codigo_barra_label.setText(_translate("MainWindow", "Codigo de Barra"))
        self.imagen_producto_label.setText(_translate("MainWindow", "An 180px / Al 190px"))
        self.button_anadir.setText(_translate("MainWindow", "Añadir"))
        self.button_borrar.setText(_translate("MainWindow", "Borrar"))
        self.button_ultimas_transacciones.setText(_translate("MainWindow", "Ultimas Transacciones"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.tab_6), _translate("MainWindow", "Ficha de Producto"))
        self.button_cerrar.setText(_translate("MainWindow", "Cerrar"))
        self.button_modificar.setText(_translate("MainWindow", "Modificar"))
        self.button_crear.setText(_translate("MainWindow", "Crear"))
        self.button_delete.setText(_translate("MainWindow", "Eliminar"))
        self.button_cancelar.setText(_translate("MainWindow", "Cancelar"))

    def mostrar_imagen_producto(self, seleccionada, deseleccionada):
        # Obtén el índice de la fila seleccionada
        indice = self.table_productos.selectionModel().currentIndex().row()

        # Verifica si el índice es válido
        if indice != -1:
            # Obtén el código del producto seleccionado
            item = self.table_productos.item(indice, 0)
            if item is not None:
                codigo = item.text()

                # Carga la imagen correspondiente en el QGraphicsView
                imagen_ruta = f"imagen_productos/producto_{codigo}.png"
                pixmap = QPixmap(imagen_ruta)
                item = QGraphicsPixmapItem(pixmap)
                self.imagen_scene.clear()
                self.imagen_scene.addItem(item)
                self.imagen_producto_graphicsView.setScene(self.imagen_scene)

        if not seleccionada:
            self.imagen_scene.clear()
            self.imagen_producto_graphicsView.setScene(self.imagen_scene)

    def seleccionar_imagen(self):
        imagen_ruta, _ = QFileDialog.getOpenFileName(self, "Seleccionar imagen", "", "Imagenes (*.png *.jpg *.jpeg)")
        if imagen_ruta:
            self.imagen_ruta = imagen_ruta
            pixmap = QPixmap(imagen_ruta)
            item = QGraphicsPixmapItem(pixmap)
            self.imagen_scene.clear()
            self.imagen_scene.addItem(item)
            self.imagen_producto_graphicsView.setScene(self.imagen_scene)
            self.imagen_producto_graphicsView.setSceneRect(0, 0, self.imagen_producto_graphicsView.width(), self.imagen_producto_graphicsView.height())
        self.imagen_producto_graphicsView.fitInView(self.imagen_producto_graphicsView.sceneRect(), Qt.KeepAspectRatio)

    def borrar_imagen(self):
        if self.imagen_scene.items():
            self.imagen_scene.clear()
            self.imagen_producto_graphicsView.setScene(self.imagen_scene)
        else:
            QMessageBox.information(self, "Información", "No hay imagen cargada")

    def cancelar(self):
        # Limpia los campos de entrada
        self.codigo_edit.clear()
        self.descripcion_edit.clear()
        self.unidad_edit.clear()
        self.existencia_minima_edit.clear()
        self.paquete_edit.clear()
        self.costo_anterior_edit.clear()
        self.costo_actual_edit.clear()
        self.costo_promedio_edit.clear()
        self.costo_reposicion_edit.clear()
        self.costo_actual_referencial_edit.clear()
        self.utilidad_bs_edit.clear()
        self.utilidad_bs_edit_2.clear()
        self.utilidad_bs_edit_3.clear()
        self.lineEdit_17.clear()
        self.lineEdit_18.clear()
        self.lineEdit_19.clear()
        self.precio_sin_impuesto_bs_edit.clear()
        self.precio_sin_impuesto_bs_edit_2.clear()
        self.precio_sin_impuesto_bs_edit_3.clear()
        self.impuesto_total_bs_edit.clear()
        self.impuesto_total_bs_edit_2.clear()
        self.impuesto_total_bs_edit_3.clear()
        self.precio_total_bs_edit.clear()
        self.precio_total_bs_edit_2.clear()
        self.precio_total_bs_edit_3.clear()
        self.utilidad_dolar_edit.clear()
        self.utilidad_dolar_edit_2.clear()
        self.utilidad_dolar_edit_3.clear()
        
        # Establece un valor predeterminado para los campos precio_dolar_sin_impuesto_edit y precio_total_dolar_edit
        self.precio_dolar_sin_impuesto_edit.setText("0.00")
        self.precio_dolar_sin_impuesto_edit_2.setText("0.00")
        self.precio_dolar_sin_impuesto_edit_3.setText("0.00")
        self.precio_total_dolar_edit.setText("0.00")
        self.precio_total_dolar_edit_2.setText("0.00")
        self.precio_total_dolar_edit_3.setText("0.00")

        # Limpia los combobox
        self.marca_comboBox.setCurrentIndex(0)
        self.linea_comboBox.setCurrentIndex(0)

        # Limpia la imagen
        self.imagen_scene.clear()
        self.imagen_producto_graphicsView.setScene(self.imagen_scene)

        # Deshabilita los campos, combobox
        self.codigo_edit.setDisabled(True)
        self.descripcion_edit.setDisabled(True)
        self.unidad_edit.setDisabled(True)
        self.peso_litro_edit.setDisabled(True)
        self.codigo_barra_edit.setDisabled(True)
        self.existencia_minima_edit.setDisabled(True)
        self.existencia_maxima_edit.setDisabled(True)
        self.lineEdit_17.setDisabled(True)
        self.lineEdit_18.setDisabled(True)
        self.lineEdit_19.setDisabled(True)
        self.paquete_edit.setDisabled(True)
        self.costo_anterior_edit.setDisabled(True)
        self.costo_actual_edit.setDisabled(True)
        self.costo_promedio_edit.setDisabled(True)
        self.costo_reposicion_edit.setDisabled(True)
        self.costo_actual_referencial_edit.setDisabled(True)
        self.utilidad_bs_edit.setDisabled(True)
        self.utilidad_bs_edit_2.setDisabled(True)
        self.utilidad_bs_edit_3.setDisabled(True)
        self.precio_sin_impuesto_bs_edit.setDisabled(True)
        self.precio_sin_impuesto_bs_edit_2.setDisabled(True)
        self.precio_sin_impuesto_bs_edit_3.setDisabled(True)
        self.impuesto_total_bs_edit.setDisabled(True)
        self.impuesto_total_bs_edit_2.setDisabled(True)
        self.impuesto_total_bs_edit_3.setDisabled(True)
        self.precio_total_bs_edit.setDisabled(True)
        self.precio_total_bs_edit_2.setDisabled(True)
        self.precio_total_bs_edit_3.setDisabled(True)
        self.utilidad_dolar_edit.setDisabled(True)
        self.utilidad_dolar_edit_2.setDisabled(True)
        self.utilidad_dolar_edit_3.setDisabled(True)
        self.precio_dolar_sin_impuesto_edit.setDisabled(True)
        self.precio_dolar_sin_impuesto_edit_2.setDisabled(True)
        self.precio_dolar_sin_impuesto_edit_3.setDisabled(True)
        self.precio_total_dolar_edit.setDisabled(True)
        self.precio_total_dolar_edit_2.setDisabled(True)
        self.precio_total_dolar_edit_3.setDisabled(True)

        # Combobox y checkbox
        self.marca_comboBox.setDisabled(True)
        self.linea_comboBox.setDisabled(True)
        self.activo_checkBox.setDisabled(True)

        # Limpia los Botones
        self.button_anadir.setDisabled(True)
        self.button_borrar.setDisabled(True)

        self.table_productos.setDisabled(False)

        # Cambia el texto del botón de guardar a "Crear"
        self.button_crear.setText("Crear")

        # Desconecta la señal de guardar producto
        try:
            self.button_crear.clicked.disconnect(self.guardar_nuevo_producto)
        except TypeError:
            pass

        # Vuelve a conectar la señal de crear producto
        self.button_crear.clicked.connect(self.habilitar_campos)

    def habilitar_eliminar(self):
        # Obtén la selección actual
        selection = self.table_productos.selectionModel().selection()
        
        # Si hay alguna fila seleccionada, habilita el botón de eliminar
        if selection.count() > 0:
            self.button_delete.setDisabled(False)
            self.button_modificar.setDisabled(False)
        # Si no hay ninguna fila seleccionada, deshabilita el botón de eliminar
        else:
            self.button_delete.setDisabled(True)
            self.button_modificar.setDisabled(True)

    def restablecer_valor_predeterminado(self):
        if self.costo_actual_referencial_edit.text() == "":
            self.costo_actual_referencial_edit.setText("0.00")

    def calcular_precios(self, text):
        if text == "":
            self.utilidad_dolar_edit.setText("0.00")
            self.utilidad_dolar_edit.selectAll()
            self.precio_dolar_sin_impuesto_edit.setText("0.00")
            self.precio_total_dolar_edit.setText("0.00")
            return
        
        utilidad_dolar = float(self.utilidad_dolar_edit.text() or "0")
        
        costo_actual_referencial = float(self.costo_actual_referencial_edit.text() or "0")
        costo_actual = float(self.costo_actual_edit.text() or "0")

        if costo_actual_referencial == 0 and utilidad_dolar == 0:
            self.precio_dolar_sin_impuesto_edit.setText("0.00")
            self.precio_total_dolar_edit.setText("0.00")
            self.utilidad_bs_edit.setText("0.00")
            self.precio_sin_impuesto_bs_edit.setText("0.00")
            self.impuesto_total_bs_edit.setText("0.00")
            self.precio_total_bs_edit.setText("0.00")
            return

        utilidad = float(self.utilidad_dolar_edit.text()) if self.utilidad_dolar_edit.text() and self.utilidad_dolar_edit.text().isdigit() else 0
        self.precio_dolar_sin_impuesto_edit.setText(str(costo_actual_referencial * (utilidad_dolar / 100) + (costo_actual_referencial)))
        impuesto = float(self.precio_dolar_sin_impuesto_edit.text() or "0") * 0.16
        total_precio = float(self.precio_dolar_sin_impuesto_edit.text() or "0") + impuesto
        self.precio_total_dolar_edit.setText(str((total_precio)) or "0")

    def precio_dolar_sin_impuesto_edit_changed(self):
        texto = self.precio_dolar_sin_impuesto_edit.text().strip()
        if texto is None or texto == 'None' or texto == "":
            self.precio_dolar_sin_impuesto_edit.setText("0.00")
            precio_sin_impuesto_dolar = 0
        else:
            precio_sin_impuesto_dolar = float(texto)

        # calcular precio total dolar
        precio_total_dolar = precio_sin_impuesto_dolar + (precio_sin_impuesto_dolar * 0.16)

        # Obtener el valor del precio sin impuesto en dólares
        precio_sin_impuesto_dolar = float(self.precio_dolar_sin_impuesto_edit.text() or "0")

        # Obtener el valor de la tasa de cambio
        tasa_cambio = float(self.moneda_referencial_edit.text() or "0")

        # Calcular el precio sin impuesto en bolívares
        precio_sin_impuesto_bs = precio_sin_impuesto_dolar * tasa_cambio
        impuesto_total_bs = precio_sin_impuesto_bs * 0.16
        precio_total_bs = precio_sin_impuesto_bs + impuesto_total_bs

        # Establecer el valor del precio sin impuesto en bolívares
        self.precio_sin_impuesto_bs_edit.setText(str(round(precio_sin_impuesto_bs, 2)))
        self.impuesto_total_bs_edit.setText(str(round(impuesto_total_bs, 2)))
        self.precio_total_bs_edit.setText(str(round(precio_total_bs, 2)))
        self.precio_total_dolar_edit.setText(str(round(precio_total_dolar, 2)))

    def actualizar_utilidad_bs(self):
        costo_actual = float(self.costo_actual_edit.text() or "0")
        costo_actual_referencial = float(self.costo_actual_referencial_edit.text() or "0")

        if costo_actual == 0 or costo_actual_referencial == 0:
            self.utilidad_bs_edit.setText("0.00")
            return
        
        utilidad_dolar = self.utilidad_dolar_edit.text()
        if utilidad_dolar == "" or utilidad_dolar is None:
            self.utilidad_bs_edit.setText("0.00")
            return
        
        utilidad_dolar = float(self.utilidad_dolar_edit.text().replace("%", "") or "0")
        utilidad_bs = costo_actual * utilidad_dolar / 100
        self.lineEdit_17.setText(str(round((utilidad_bs), 2)))
        self.utilidad_bs_edit.setText(str(round((utilidad_bs / costo_actual) * 100, 3)) + "%")
        precio_bs_sin_impuesto = float(self.precio_sin_impuesto_bs_edit.text() or "0")
        self.precio_sin_impuesto_bs_edit.setText(str(round((costo_actual + utilidad_bs), 2)))
        self.impuesto_total_bs_edit.setText(str(round((precio_bs_sin_impuesto * 0.16), 2)))
        impuesto_bs = 1.16
        self.precio_total_bs_edit.setText(str(round((precio_bs_sin_impuesto * impuesto_bs), 2)))

    def calcular_precios_2(self, text):
        if text == "":
            self.utilidad_dolar_edit_2.setText("0.00")
            self.utilidad_dolar_edit_2.selectAll()
            self.precio_dolar_sin_impuesto_edit_2.setText("0.00")
            self.precio_total_dolar_edit_2.setText("0.00")
            return
        
        utilidad_dolar = float(self.utilidad_dolar_edit_2.text() or "0")
        
        costo_actual_referencial = float(self.costo_actual_referencial_edit.text() or "0")
        costo_actual = float(self.costo_actual_edit.text() or "0")

        if costo_actual_referencial == 0 and utilidad_dolar == 0:
            self.precio_dolar_sin_impuesto_edit_2.setText("0.00")
            self.precio_total_dolar_edit_2.setText("0.00")
            self.utilidad_bs_edit_2.setText("0.00")
            self.precio_sin_impuesto_bs_edit_2.setText("0.00")
            self.impuesto_total_bs_edit_2.setText("0.00")
            self.precio_total_bs_edit_2.setText("0.00")
            return

        utilidad = float(self.utilidad_dolar_edit_2.text()) if self.utilidad_dolar_edit_2.text() and self.utilidad_dolar_edit_2.text().isdigit() else 0
        self.precio_dolar_sin_impuesto_edit_2.setText(str(costo_actual_referencial * (utilidad_dolar / 100) + (costo_actual_referencial)))
        impuesto = float(self.precio_dolar_sin_impuesto_edit_2.text() or "0") * 0.16
        total_precio = float(self.precio_dolar_sin_impuesto_edit_2.text() or "0") + impuesto
        self.precio_total_dolar_edit_2.setText(str((total_precio)) or "0")

    def precio_dolar_sin_impuesto_edit_changed_2(self):
        texto = self.precio_dolar_sin_impuesto_edit_2.text().strip()
        if texto is None or texto == 'None' or texto == "":
            self.precio_dolar_sin_impuesto_edit_2.setText("0.00")
            precio_sin_impuesto_dolar = 0
        else:
            precio_sin_impuesto_dolar = float(texto)

        # calcular precio total dolar
        precio_total_dolar = precio_sin_impuesto_dolar + (precio_sin_impuesto_dolar * 0.16)

        # Obtener el valor del precio sin impuesto en dólares
        precio_sin_impuesto_dolar = float(self.precio_dolar_sin_impuesto_edit_2.text() or "0")

        # Obtener el valor de la tasa de cambio
        tasa_cambio = float(self.moneda_referencial_edit.text() or "0")

        # Calcular el precio sin impuesto en bolívares
        precio_sin_impuesto_bs = precio_sin_impuesto_dolar * tasa_cambio
        impuesto_total_bs = precio_sin_impuesto_bs * 0.16
        precio_total_bs = precio_sin_impuesto_bs + impuesto_total_bs

        # Establecer el valor del precio sin impuesto en bolívares
        self.precio_sin_impuesto_bs_edit_2.setText(str(round(precio_sin_impuesto_bs, 2)))
        self.impuesto_total_bs_edit_2.setText(str(round(impuesto_total_bs, 2)))
        self.precio_total_bs_edit_2.setText(str(round(precio_total_bs, 2)))
        self.precio_total_dolar_edit_2.setText(str(round(precio_total_dolar, 2)))

    def actualizar_utilidad_bs_2(self):
        costo_actual = float(self.costo_actual_edit.text() or "0")
        costo_actual_referencial = float(self.costo_actual_referencial_edit.text() or "0")

        if costo_actual == 0 or costo_actual_referencial == 0:
            self.utilidad_bs_edit_2.setText("0.00")
            return
        
        utilidad_dolar = float(self.utilidad_dolar_edit_2.text().replace("%", "") or "0")
        utilidad_bs = costo_actual * utilidad_dolar / 100
        self.lineEdit_18.setText(str(round((utilidad_bs), 2)))
        self.utilidad_bs_edit_2.setText(str(round((utilidad_bs / costo_actual) * 100, 3)) + "%")
        precio_bs_sin_impuesto = float(self.precio_sin_impuesto_bs_edit_2.text() or "0")
        self.precio_sin_impuesto_bs_edit_2.setText(str(round((costo_actual + utilidad_bs), 2)))
        self.impuesto_total_bs_edit_2.setText(str(round((precio_bs_sin_impuesto * 0.16), 2)))
        impuesto_bs = 1.16
        self.precio_total_bs_edit_2.setText(str(round((precio_bs_sin_impuesto * impuesto_bs), 2)))

    def calcular_precios_3(self, text):
        if text == "":
            self.utilidad_dolar_edit_3.setText("0.00")
            self.utilidad_dolar_edit_3.selectAll()
            self.precio_dolar_sin_impuesto_edit_3.setText("0.00")
            self.precio_total_dolar_edit_3.setText("0.00")
            return
        
        utilidad_dolar = float(self.utilidad_dolar_edit_3.text() or "0")
        
        costo_actual_referencial = float(self.costo_actual_referencial_edit.text() or "0")
        costo_actual = float(self.costo_actual_edit.text() or "0")

        if costo_actual_referencial == 0 and utilidad_dolar == 0:
            self.precio_dolar_sin_impuesto_edit_3.setText("0.00")
            self.precio_total_dolar_edit_3.setText("0.00")
            self.utilidad_bs_edit_3.setText("0.00")
            self.precio_sin_impuesto_bs_edit_3.setText("0.00")
            self.impuesto_total_bs_edit_3.setText("0.00")
            self.precio_total_bs_edit_3.setText("0.00")
            return

        utilidad = float(self.utilidad_dolar_edit_3.text()) if self.utilidad_dolar_edit_3.text() and self.utilidad_dolar_edit_3.text().isdigit() else 0
        self.precio_dolar_sin_impuesto_edit_3.setText(str(costo_actual_referencial * (utilidad_dolar / 100) + (costo_actual_referencial)))
        impuesto = float(self.precio_dolar_sin_impuesto_edit_3.text() or "0") * 0.16
        total_precio = float(self.precio_dolar_sin_impuesto_edit_3.text() or "0") + impuesto
        self.precio_total_dolar_edit_3.setText(str((total_precio)) or "0")

    def precio_dolar_sin_impuesto_edit_changed_3(self):
        texto = self.precio_dolar_sin_impuesto_edit_3.text().strip()
        if texto is None or texto == 'None' or texto == "":
            self.precio_dolar_sin_impuesto_edit_3.setText("0.00")
            precio_sin_impuesto_dolar = 0
        else:
            precio_sin_impuesto_dolar = float(texto)

        # calcular precio total dolar
        precio_total_dolar = precio_sin_impuesto_dolar + (precio_sin_impuesto_dolar * 0.16)

        # Obtener el valor del precio sin impuesto en dólares
        precio_sin_impuesto_dolar = float(self.precio_dolar_sin_impuesto_edit_3.text() or "0")

        # Obtener el valor de la tasa de cambio
        tasa_cambio = float(self.moneda_referencial_edit.text() or "0")

        # Calcular el precio sin impuesto en bolívares
        precio_sin_impuesto_bs = precio_sin_impuesto_dolar * tasa_cambio
        impuesto_total_bs = precio_sin_impuesto_bs * 0.16
        precio_total_bs = precio_sin_impuesto_bs + impuesto_total_bs

        # Establecer el valor del precio sin impuesto en bolívares
        self.precio_sin_impuesto_bs_edit_3.setText(str(round(precio_sin_impuesto_bs, 2)))
        self.impuesto_total_bs_edit_3.setText(str(round(impuesto_total_bs, 2)))
        self.precio_total_bs_edit_3.setText(str(round(precio_total_bs, 2)))
        self.precio_total_dolar_edit_3.setText(str(round(precio_total_dolar, 2)))

    def actualizar_utilidad_bs_3(self):
        costo_actual = float(self.costo_actual_edit.text() or "0")
        costo_actual_referencial = float(self.costo_actual_referencial_edit.text() or "0")

        if costo_actual == 0 or costo_actual_referencial == 0:
            self.utilidad_bs_edit_3.setText("0.00")
            return
        
        utilidad_dolar = float(self.utilidad_dolar_edit_3.text().replace("%", "") or "0")
        utilidad_bs = costo_actual * utilidad_dolar / 100
        self.lineEdit_19.setText(str(round((utilidad_bs), 2)))
        self.utilidad_bs_edit_3.setText(str(round((utilidad_bs / costo_actual) * 100, 3)) + "%")
        precio_bs_sin_impuesto = float(self.precio_sin_impuesto_bs_edit_3.text() or "0")
        self.precio_sin_impuesto_bs_edit_3.setText(str(round((costo_actual + utilidad_bs), 2)))
        self.impuesto_total_bs_edit_3.setText(str(round((precio_bs_sin_impuesto * 0.16), 2)))
        impuesto_bs = 1.16
        self.precio_total_bs_edit_3.setText(str(round((precio_bs_sin_impuesto * impuesto_bs), 2)))

    def calcular_costo(self, campo):
        input_str = campo.text()
        aeval = asteval.Interpreter()
        try:
            resultado = aeval(input_str)
            campo.setText(str(resultado))
        except Exception as e:
            campo.setText("Error: " + str(e))

    def set_moneda_placeholder(self, line_edit, moneda):
        line_edit.setPlaceholderText(f'{moneda} ')

    def actualizar_costo_actual(self):
        # Obtener el valor ingresado en costo_actual_referencial_edit
        costo_referencial = float(self.costo_actual_referencial_edit.text())

        # Obtener la tasa de conversión en moneda_referencial_edit
        tasa_conversion = float(self.moneda_referencial_edit.text())

        # Calcular el costo actual como el producto de costo_referencial y tasa_conversion
        costo_actual = costo_referencial * tasa_conversion

        # Actualizar el campo costo_actual_edit con el resultado
        self.costo_actual_edit.setText(str(round(costo_actual, 3)))

    def cargar_moneda_referencial(self):
        conn = sqlite3.connect('Usuarios.db')
        cursor = conn.cursor()

        # Obtener el factor de inventario de la moneda dólares
        cursor.execute("SELECT factor_inventario FROM monedas WHERE nombre = 'Dolares'")
        factor_inventario_dolares = cursor.fetchone()[0]

        # Asignar el valor a la variable moneda_referencial_edit
        self.moneda_referencial_edit.setText(str(factor_inventario_dolares))

        conn.close()

    def cambiar_estado_activo(self):
        conn = sqlite3.connect('Usuarios.db')
        cursor = conn.cursor()
        query = """UPDATE productos_inventario SET activo = ? WHERE id = ?"""
        item = self.table_productos.item(self.table_productos.currentRow(), 0)
        if item is not None:
            cursor.execute(query, (self.activo_checkBox.isChecked(), item.text()))
        conn.commit()
        conn.close()

    def mostrar_mensaje_estado(self, Line_edit, mensaje):
        self.statusbar.showMessage(mensaje, 3000)  # Mostrar el mensaje durante 3 segundos

    def obtener_cantidad_productos(self):
        conn = sqlite3.connect('Usuarios.db')
        cursor = conn.cursor()
        query = """SELECT COUNT(*) FROM productos_inventario"""
        cursor.execute(query)
        resultado = cursor.fetchone()
        conn.close()
        return resultado[0] if resultado[0] is not None else 0
        
    def actualizar_barra_estado(self):
        self.statusbar.showMessage(f"Productos creados: {self.obtener_cantidad_productos()}")

    def abrir_ventana_linea(self, texto):
        if texto == "Crear nueva linea":
            # Abre la ventana de marcas
            self.ventana_linea = ConfiguracionLinea()  
            self.ventana_linea.finished.connect(self.cargar_linea)  # Conecta la señal finished a la función cargar_linea
            self.ventana_linea.show()

    def cargar_linea(self):
        conn = sqlite3.connect('Usuarios.db')
        cursor = conn.cursor()

        # Prepara la consulta SQL para seleccionar todas las marcas
        query = """SELECT nombre FROM linea_inventario ORDER BY nombre"""

        # Ejecuta la consulta
        cursor.execute(query)

        # Limpia el combobox antes de agregar nuevas opciones
        self.linea_comboBox.clear()

        # Agrega las lineas al combobox
        row = cursor.fetchone()
        while row is not None:
            linea = row[0]
            self.linea_comboBox.addItem(linea)
            row = cursor.fetchone()

        # Agrega la opción "Crear linea"
        self.linea_comboBox.addItem("Crear nueva linea")

        # Cierra la conexión a la base de datos
        conn.close()

    def actualizar_linea(self):
        conn = sqlite3.connect('Usuarios.db')
        cursor = conn.cursor()

        # Prepara la consulta SQL para actualizar la tabla productos_inventario con la nueva linea
        query = """UPDATE productos_inventario SET linea = (SELECT nombre FROM linea_inventario WHERE id = (SELECT MAX(id) FROM marcas)) WHERE marca IS NULL"""

        # Ejecuta la consulta
        cursor.execute(query)

        # Cierra la conexión a la base de datos
        conn.commit()
        conn.close()

    def abrir_ventana_marcas(self, texto):
        if texto == "Crear marca":
            # Abre la ventana de marcas
            self.ventana_marcas = ConfiguracionMarcas()  
            self.ventana_marcas.finished.connect(self.cargar_marcas)  # Conecta la señal finished a la función cargar_marcas
            self.ventana_marcas.show()

    def actualizar_marcas(self):
        conn = sqlite3.connect('Usuarios.db')
        cursor = conn.cursor()

        # Prepara la consulta SQL para actualizar la tabla productos_inventario con la nueva marca
        query = """UPDATE productos_inventario SET marca = (SELECT nombre FROM marcas WHERE id = (SELECT MAX(id) FROM marcas)) WHERE marca IS NULL"""

        # Ejecuta la consulta
        cursor.execute(query)

        # Cierra la conexión a la base de datos
        conn.commit()
        conn.close()

    def cargar_marcas(self):
        conn = sqlite3.connect('Usuarios.db')
        cursor = conn.cursor()

        # Prepara la consulta SQL para seleccionar todas las marcas
        query = """SELECT nombre FROM marcas ORDER BY nombre"""

        # Ejecuta la consulta
        cursor.execute(query)

        # Limpia el combobox antes de agregar nuevas opciones
        self.marca_comboBox.clear()

        # Agrega las marcas al combobox
        while True:
            row = cursor.fetchone()
            if row is None:
                break
            marca = row[0]
            self.marca_comboBox.addItem(marca)

        # Agrega la opción "Crear marca"
        self.marca_comboBox.addItem("Crear marca")

        # Llamar al método cargar_moneda_referencial
        self.cargar_moneda_referencial()

        # Cierra la conexión a la base de datos
        conn.close()

    def habilitar_campos(self):
        # Habilita los campos de entrada
        self.codigo_edit.setDisabled(False)
        self.descripcion_edit.setDisabled(False)
        self.unidad_edit.setDisabled(False)
        self.unidad_edit.setText("1")
        self.paquete_edit.setDisabled(False)
        self.activo_checkBox.setChecked(True)
        self.costo_anterior_edit.setDisabled(False)
        self.costo_actual_edit.setDisabled(False)
        self.costo_promedio_edit.setDisabled(False)
        self.costo_reposicion_edit.setDisabled(False)
        self.moneda_referencial_edit.setDisabled(True)
        self.costo_actual_referencial_edit.setDisabled(False)
        self.utilidad_bs_edit.setDisabled(False)
        self.precio_sin_impuesto_bs_edit.setDisabled(False)
        self.impuesto_total_bs_edit.setDisabled(False)
        self.precio_total_bs_edit.setDisabled(False)
        self.lineEdit_17.setDisabled(False)
        self.utilidad_dolar_edit.setDisabled(False)
        self.precio_dolar_sin_impuesto_edit.setDisabled(False)
        self.precio_total_dolar_edit.setDisabled(False)
        self.utilidad_bs_edit_2.setDisabled(False)
        self.precio_sin_impuesto_bs_edit_2.setDisabled(False)
        self.impuesto_total_bs_edit_2.setDisabled(False)
        self.precio_total_bs_edit_2.setDisabled(False)
        self.lineEdit_18.setDisabled(False)
        self.utilidad_dolar_edit_2.setDisabled(False)
        self.precio_dolar_sin_impuesto_edit_2.setDisabled(False)
        self.precio_total_dolar_edit_2.setDisabled(False)
        self.utilidad_bs_edit_3.setDisabled(False)
        self.precio_sin_impuesto_bs_edit_3.setDisabled(False)
        self.impuesto_total_bs_edit_3.setDisabled(False)
        self.precio_total_bs_edit_3.setDisabled(False)
        self.lineEdit_19.setDisabled(False)
        self.utilidad_dolar_edit_3.setDisabled(False)
        self.precio_dolar_sin_impuesto_edit_3.setDisabled(False)
        self.precio_total_dolar_edit_3.setDisabled(False)
        self.peso_litro_edit.setDisabled(False)
        self.existencia_actual_edit.setDisabled(False)
        self.existencia_maxima_edit.setDisabled(False)
        self.existencia_minima_edit.setDisabled(False)
        self.existencia_minima_edit.setText("1")
        self.codigo_barra_edit.setDisabled(False)
        self.table_productos.setDisabled(True)
        self.moneda_listView.setDisabled(True)
        self.moneda_ref_listView.setDisabled(True)

        # Habilita los QComboBox
        self.marca_comboBox.setDisabled(False)
        self.linea_comboBox.setDisabled(False)

        # Habilita los checkbox
        self.activo_checkBox.setDisabled(False)

        # Limpia la imagen del QGraphicsView
        self.imagen_scene.clear()
        self.imagen_producto_graphicsView.setScene(self.imagen_scene)

        # Habilita los botones "Añadir" y "Borrar"
        self.button_anadir.setDisabled(False)
        self.button_borrar.setDisabled(False)
        self.button_cancelar.setDisabled(False)
        # Cambia el texto del botón "Crear" a "Guardar Producto"
        self.button_crear.setText("Guardar")

        # Vuelve a conectar la señal clicked del botón button_crear a la función guardar_nuevo_producto
        self.button_crear.clicked.disconnect()
        self.button_crear.clicked.connect(self.guardar_nuevo_producto)

    def guardar_nuevo_producto(self):
        # Conecta a la base de datos
        conn = sqlite3.connect('Usuarios.db')
        cursor = conn.cursor()

        codigo = self.codigo_edit.text()

        # Check if required fields are filled in
        for campo in self.campos_obligatorios():
            if isinstance(campo, QtWidgets.QLineEdit):
                if campo.text() == "":
                    QMessageBox.critical(None, "Error", "Los campos obligatorios no pueden estar vacíos.")
                    return
            elif isinstance(campo, QtWidgets.QComboBox):
                if campo.currentText() == "":
                    QMessageBox.critical(None, "Error", "Los campos obligatorios no pueden estar vacíos.")
                    return

        # Verifica si el producto ya existe en la base de datos
        query = "SELECT * FROM productos_inventario WHERE codigo = ?"
        cursor.execute(query, (self.codigo_edit.text(),))
        resultado = cursor.fetchone()

        if resultado is None:
            # Obtener los valores seleccionados en los combobox de marca y línea
            marca = self.marca_comboBox.currentText()
            linea = self.linea_comboBox.currentText()

            # Inserta el producto en la base de datos
            query = """INSERT INTO productos_inventario (
                codigo,
                descripcion,
                unidad,
                paquete,
                costo_anterior,
                costo_actual,
                costo_promedio,
                costo_reposicion,
                moneda_referencial,
                costo_actual_referencial,
                utilidad_bs,
                utilidad_bs_2,
                utilidad_bs_3,
                monto_utilidad_bs,
                monto_utilidad_bs_2,
                monto_utilidad_bs_3,
                precio_sin_impuesto_bs,
                precio_sin_impuesto_bs_2,
                precio_sin_impuesto_bs_3,
                impuesto_total_bs,
                impuesto_total_bs_2,
                impuesto_total_bs_3,
                precio_total_bs,
                precio_total_bs_2,
                precio_total_bs_3,
                utilidad_dolar,
                utilidad_dolar_2,
                utilidad_dolar_3,
                precio_sin_impuesto_dolar,
                precio_sin_impuesto_dolar_2,
                precio_sin_impuesto_dolar_3,
                precio_total_dolar,
                precio_total_dolar_2,
                precio_total_dolar_3,
                peso_litro,
                existencia_actual,
                existencia_maxima,
                existencia_minima,
                codigo_barra,
                marca,
                linea,
                activo
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""
            fields = [
                ("codigo", self.codigo_edit),
                ("descripcion", self.descripcion_edit),
                ("unidad", self.unidad_edit),
                ("paquete", self.paquete_edit),
                ("costo_anterior", self.costo_anterior_edit),
                ("costo_actual", self.costo_actual_edit),
                ("costo_promedio", self.costo_promedio_edit),
                ("costo_reposicion", self.costo_reposicion_edit),
                ("moneda_referencial", self.moneda_referencial_edit),
                ("costo_actual_referencial", self.costo_actual_referencial_edit),
                ("utilidad_bs", self.utilidad_bs_edit),
                ("utilidad_bs_2", self.utilidad_bs_edit_2),
                ("utilidad_bs_3", self.utilidad_bs_edit_3),
                ("monto_utilidad_bs", self.lineEdit_17),
                ("monto_utilidad_bs_2", self.lineEdit_18),
                ("monto_utilidad_bs_3", self.lineEdit_19),
                ("precio_sin_impuesto_bs", self.precio_sin_impuesto_bs_edit),
                ("precio_sin_impuesto_bs_2", self.precio_sin_impuesto_bs_edit_2),
                ("precio_sin_impuesto_bs_3", self.precio_sin_impuesto_bs_edit_3),
                ("impuesto_total_bs", self.impuesto_total_bs_edit),
                ("impuesto_total_bs_2", self.impuesto_total_bs_edit_2),
                ("impuesto_total_bs_3", self.impuesto_total_bs_edit_3),
                ("precio_total_bs", self.precio_total_bs_edit),
                ("precio_total_bs_2", self.precio_total_bs_edit_2),
                ("precio_total_bs_3", self.precio_total_bs_edit_3),
                ("utilidad_dolar", self.utilidad_dolar_edit),
                ("utilidad_dolar_2", self.utilidad_dolar_edit_2),
                ("utilidad_dolar_3", self.utilidad_dolar_edit_3),
                ("precio_sin_impuesto_dolar", self.precio_dolar_sin_impuesto_edit),
                ("precio_sin_impuesto_dolar_2", self.precio_dolar_sin_impuesto_edit_2),
                ("precio_sin_impuesto_dolar_3", self.precio_dolar_sin_impuesto_edit_3),
                ("precio_total_dolar", self.precio_total_dolar_edit),
                ("precio_total_dolar_2", self.precio_total_dolar_edit_2),
                ("precio_total_dolar_3", self.precio_total_dolar_edit_3),
                ("peso_litro", self.peso_litro_edit),
                ("existencia_actual", self.existencia_actual_edit),
                ("existencia_maxima", self.existencia_maxima_edit),
                ("existencia_minima", self.existencia_minima_edit),
                ("codigo_barra", self.codigo_barra_edit),
                ("marca", self.marca_comboBox),
                ("linea", self.linea_comboBox),
                ("activo", self.activo_checkBox.isChecked())
            ]
            valores = []
            for field, edit in fields:
                if hasattr(edit, 'text'):
                    valores.append(edit.text())
                elif hasattr(edit, 'currentText'):
                    valores.append(edit.currentText())
                elif isinstance(edit, bool):
                    valores.append(str(edit))
                else:
                    valores.append('')
            cursor.execute(query, valores)

        self.table_productos.setDisabled(False)

        # Obtén el último ID insertado
        last_id = cursor.lastrowid

        # Selecciona el producto recién insertado en la tabla
        self.table_productos.selectRow(self.table_productos.rowCount() - 1)

        if self.imagen_scene.items():
            imagen_nombre = f"producto_{codigo}.png"
            imagen_ruta_guardar = os.path.join(os.getcwd(), "imagen_productos", imagen_nombre)
            if self.imagen_scene.items():  # Verificar que haya al menos un item
                pixmap = self.imagen_scene.items()[0].pixmap()
                pixmap.save(imagen_ruta_guardar, "png")

        # Cierra la conexión a la base de datos
        conn.commit()
        conn.close()

        # Limpia los campos de entrada, combobox y la imagen
        self.cargar_productos_en_tabla()
        self.limpiar_campos()
        # Limpia la imagen del QGraphicsView
        self.imagen_scene.clear()
        self.imagen_producto_graphicsView.setScene(self.imagen_scene)

        self.button_crear.setText("Crear")
        self.button_crear.clicked.disconnect(self.guardar_nuevo_producto)
        self.button_crear.clicked.connect(self.habilitar_campos)

        # Deshabilita los campos y combobox
        self.codigo_edit.setDisabled(True)
        self.descripcion_edit.setDisabled(True)
        self.unidad_edit.setDisabled(True)
        self.paquete_edit.setDisabled(True)
        self.activo_checkBox.setDisabled(True)
        self.costo_anterior_edit.setDisabled(True)
        self.costo_actual_edit.setDisabled(True)
        self.costo_promedio_edit.setDisabled(True)
        self.costo_reposicion_edit.setDisabled(True)
        self.moneda_referencial_edit.setDisabled(True)
        self.costo_actual_referencial_edit.setDisabled(True)
        self.utilidad_bs_edit.setDisabled(True)
        self.precio_sin_impuesto_bs_edit.setDisabled(True)
        self.impuesto_total_bs_edit.setDisabled(True)
        self.precio_total_bs_edit.setDisabled(True)
        self.lineEdit_17.setDisabled(True)
        self.utilidad_dolar_edit.setDisabled(True)
        self.precio_dolar_sin_impuesto_edit.setDisabled(True)
        self.precio_total_dolar_edit.setDisabled(True)
        self.utilidad_bs_edit_2.setDisabled(True)
        self.precio_sin_impuesto_bs_edit_2.setDisabled(True)
        self.impuesto_total_bs_edit_2.setDisabled(True)
        self.precio_total_bs_edit_2.setDisabled(True)
        self.lineEdit_18.setDisabled(True)
        self.utilidad_dolar_edit_2.setDisabled(True)
        self.precio_dolar_sin_impuesto_edit_2.setDisabled(True)
        self.precio_total_dolar_edit_2.setDisabled(True)
        self.utilidad_bs_edit_3.setDisabled(True)
        self.precio_sin_impuesto_bs_edit_3.setDisabled(True)
        self.impuesto_total_bs_edit_3.setDisabled(True)
        self.precio_total_bs_edit_3.setDisabled(True)
        self.lineEdit_19.setDisabled(True)
        self.utilidad_dolar_edit_3.setDisabled(True)
        self.precio_dolar_sin_impuesto_edit_3.setDisabled(True)
        self.precio_total_dolar_edit_3.setDisabled(True)
        self.peso_litro_edit.setDisabled(True)
        self.existencia_actual_edit.setDisabled(True)
        self.existencia_maxima_edit.setDisabled(True)
        self.existencia_minima_edit.setDisabled(True)
        self.codigo_barra_edit.setDisabled(True)
        self.marca_comboBox.setDisabled(True)
        self.linea_comboBox.setDisabled(True)

    def guardar_producto_modificado(self):
        # Obtener el código del producto modificado
        codigo = self.codigo_edit.text()

        # Conectar a la base de datos
        conn = sqlite3.connect('Usuarios.db')
        cursor = conn.cursor()

        # Actualizar el producto en la base de datos
        query = """UPDATE productos_inventario SET
                    descripcion = ?,
                    unidad = ?,
                    paquete = ?,
                    costo_anterior = ?,
                    costo_actual = ?,
                    costo_promedio = ?,
                    costo_reposicion = ?,
                    costo_actual_referencial = ?,
                    utilidad_bs = ?,
                    utilidad_bs_2 = ?,
                    utilidad_bs_3 = ?,
                    monto_utilidad_bs = ?,
                    monto_utilidad_bs_2 = ?,
                    monto_utilidad_bs_3 = ?,
                    precio_sin_impuesto_bs = ?,
                    precio_sin_impuesto_bs_2 = ?,
                    precio_sin_impuesto_bs_3 = ?,
                    impuesto_total_bs = ?,
                    impuesto_total_bs_2 = ?,
                    impuesto_total_bs_3 = ?,
                    precio_total_bs = ?,
                    precio_total_bs_2 = ?,
                    precio_total_bs_3 = ?,
                    utilidad_dolar = ?,
                    utilidad_dolar_2 = ?,
                    utilidad_dolar_3 = ?,
                    precio_sin_impuesto_dolar = ?,
                    precio_sin_impuesto_dolar_2 = ?,
                    precio_sin_impuesto_dolar_3 = ?,
                    precio_total_dolar = ?,
                    precio_total_dolar_2 = ?,
                    precio_total_dolar_3 = ?,
                    peso_litro = ?,
                    existencia_maxima = ?,
                    existencia_minima = ?,
                    codigo_barra = ?,
                    marca = ?,
                    linea = ?,
                    activo = ?
                    WHERE codigo = ?"""
        valores = [
            self.descripcion_edit.text(),
            self.unidad_edit.text(),
            self.paquete_edit.text(),
            str(self.costo_anterior_edit.text()),
            float(self.costo_actual_edit.text()),
            str(self.costo_promedio_edit.text()),
            str(self.costo_reposicion_edit.text()),
            float(self.costo_actual_referencial_edit.text()),
            str(self.utilidad_bs_edit.text()),
            str(self.utilidad_bs_edit_2.text()),
            str(self.utilidad_bs_edit_3.text()),
            float(self.lineEdit_17.text()),
            float(self.lineEdit_18.text()),
            float(self.lineEdit_18.text()),
            float(self.precio_sin_impuesto_bs_edit.text()),
            float(self.precio_sin_impuesto_bs_edit_2.text()),
            float(self.precio_sin_impuesto_bs_edit_3.text()),
            float(self.impuesto_total_bs_edit.text()),
            float(self.impuesto_total_bs_edit_2.text()),
            float(self.impuesto_total_bs_edit_3.text()),
            float(self.precio_total_bs_edit.text()),
            float(self.precio_total_bs_edit_2.text()),
            float(self.precio_total_bs_edit_3.text()),
            float(self.utilidad_dolar_edit.text()),
            float(self.utilidad_dolar_edit_2.text()),
            float(self.utilidad_dolar_edit_3.text()),
            float(self.precio_dolar_sin_impuesto_edit.text()),
            float(self.precio_dolar_sin_impuesto_edit_2.text()),
            float(self.precio_dolar_sin_impuesto_edit_3.text()),
            float(self.precio_total_dolar_edit.text()),
            float(self.precio_total_dolar_edit_2.text()),
            float(self.precio_total_dolar_edit_3.text()),
            str(self.peso_litro_edit.text()),
            float(self.existencia_maxima_edit.text()),
            float(self.existencia_minima_edit.text()),
            self.codigo_barra_edit.text(),
            self.marca_comboBox.currentText(),
            self.linea_comboBox.currentText(),
            self.activo_checkBox.isChecked(),
            codigo
        ]
        cursor.execute(query, valores)
        conn.commit()

        # Cerrar la conexión a la base de datos
        conn.close()

        # Actualizar la tabla de productos
        self.cargar_productos_en_tabla()

    def modificar_producto(self):
        print("Entrando en la función modificar_producto")
        # Obtén el índice de la fila seleccionada
        indice = self.table_productos.selectionModel().currentIndex().row()
        print("Índice de la fila seleccionada:", indice)

        # Verifica si el índice es válido
        if indice != -1:
            print("Índice válido")
            # Limpia los campos de entrada, combobox y graphic view
            self.limpiar_campos()
            self.imagen_scene.clear()
            self.imagen_producto_graphicsView.setScene(self.imagen_scene)

            # Obtén el código del producto seleccionado
            item = self.table_productos.item(indice, 0)
            if item is not None:
                print("Código del producto seleccionado:", item.text())
                codigo = item.text()

                # Conecta a la base de datos
                conn = sqlite3.connect('Usuarios.db')
                cursor = conn.cursor()

                # Prepara la consulta SQL para seleccionar el producto
                query = """SELECT * FROM productos_inventario WHERE codigo = ?"""
                cursor.execute(query, (codigo,))
            
                # Iterar sobre los resultados y llenar los campos
                row = cursor.fetchone()
                if row is not None:
                    print("Producto encontrado")
                    # Cargar los campos de entrada
                    self.codigo_edit.setText(row[1])
                    self.descripcion_edit.setText(row[2])
                    self.unidad_edit.setText(row[5])
                    self.paquete_edit.setText(row[6])
                    self.costo_anterior_edit.setText(str(row[7]))
                    self.costo_actual_edit.setText(str(row[8]))
                    self.costo_promedio_edit.setText(str(row[9]))
                    self.costo_reposicion_edit.setText(str(row[10]))
                    self.costo_actual_referencial_edit.setText(str(row[12]))
                    self.utilidad_bs_edit.setText(str(row[13]))
                    self.utilidad_bs_edit_2.setText(str(row[20]))
                    self.utilidad_bs_edit_3.setText(str(row[27]))
                    self.lineEdit_17.setText(str(row[40]))
                    self.lineEdit_18.setText(str(row[41]))
                    self.lineEdit_19.setText(str(row[42]))
                    self.precio_sin_impuesto_bs_edit.setText(str(row[14]))
                    self.precio_sin_impuesto_bs_edit_2.setText(str(row[21]))
                    self.precio_sin_impuesto_bs_edit_3.setText(str(row[28]))
                    self.impuesto_total_bs_edit.setText(str(row[15]))
                    self.impuesto_total_bs_edit_2.setText(str(row[22]))
                    self.impuesto_total_bs_edit_3.setText(str(row[29]))
                    self.precio_total_bs_edit.setText(str(row[16]))
                    self.precio_total_bs_edit_2.setText(str(row[23]))
                    self.precio_total_bs_edit_3.setText(str(row[30]))
                    self.utilidad_dolar_edit.setText(str(row[17]))
                    self.utilidad_dolar_edit_2.setText(str(row[24]))
                    self.utilidad_dolar_edit_3.setText(str(row[37]))
                    self.precio_dolar_sin_impuesto_edit.setText(str(row[18]))
                    self.precio_dolar_sin_impuesto_edit_2.setText(str(row[25]))
                    self.precio_dolar_sin_impuesto_edit_3.setText(str(row[38]))
                    self.precio_total_dolar_edit.setText(str(row[19]))
                    self.precio_total_dolar_edit_2.setText(str(row[26]))
                    self.precio_total_dolar_edit_3.setText(str(row[39]))
                    self.peso_litro_edit.setText(str(row[31]))
                    self.existencia_actual_edit.setText(str(row[32]))
                    self.existencia_maxima_edit.setText(str(row[33]))
                    self.existencia_minima_edit.setText(str(row[34]))
                    self.codigo_barra_edit.setText(str(row[35]))

                    # Cargar los combobox
                    self.marca_comboBox.setCurrentText(row[3])
                    self.linea_comboBox.setCurrentText(row[4])

                    self.activo_checkBox.setChecked(bool(row[36]))

                    # Cargar la imagen
                    imagen_ruta = f"imagen_productos/producto_{codigo}.png"
                    pixmap = QPixmap(imagen_ruta)
                    item = QGraphicsPixmapItem(pixmap)
                    self.imagen_scene.addItem(item)
                    self.imagen_producto_graphicsView.setScene(self.imagen_scene)

                # Cierra la conexión a la base de datos
                conn.close()
            # Deshabilitar la tabla
            self.table_productos.setDisabled(True)

            # Habilitar campos, combobox, graphic view y checkbox
            self.codigo_edit.setDisabled(False)
            self.descripcion_edit.setDisabled(False)
            self.unidad_edit.setDisabled(False)
            self.paquete_edit.setDisabled(False)
            self.existencia_maxima_edit.setDisabled(False)
            self.peso_litro_edit.setDisabled(False)
            self.codigo_barra_edit.setDisabled(False)
            self.activo_checkBox.setDisabled(False)
            self.costo_anterior_edit.setDisabled(False)
            self.costo_actual_edit.setDisabled(False)
            self.costo_promedio_edit.setDisabled(False)
            self.costo_reposicion_edit.setDisabled(False)
            self.costo_actual_referencial_edit.setDisabled(False)
            self.utilidad_bs_edit.setDisabled(False)
            self.utilidad_bs_edit_2.setDisabled(False)
            self.utilidad_bs_edit_3.setDisabled(False)
            self.precio_sin_impuesto_bs_edit.setDisabled(False)
            self.precio_sin_impuesto_bs_edit_2.setDisabled(False)
            self.precio_sin_impuesto_bs_edit_3.setDisabled(False)
            self.impuesto_total_bs_edit.setDisabled(False)
            self.impuesto_total_bs_edit_2.setDisabled(False)
            self.impuesto_total_bs_edit_3.setDisabled(False)
            self.precio_total_bs_edit.setDisabled(False)
            self.precio_total_bs_edit_2.setDisabled(False)
            self.precio_total_bs_edit_3.setDisabled(False)
            self.utilidad_dolar_edit.setDisabled(False)
            self.utilidad_dolar_edit_2.setDisabled(False)
            self.utilidad_dolar_edit_3.setDisabled(False)
            self.precio_dolar_sin_impuesto_edit.setDisabled(False)
            self.precio_dolar_sin_impuesto_edit_2.setDisabled(False)
            self.precio_dolar_sin_impuesto_edit_3.setDisabled(False)
            self.precio_total_dolar_edit.setDisabled(False)
            self.precio_total_dolar_edit_2.setDisabled(False)
            self.precio_total_dolar_edit_3.setDisabled(False)
            self.marca_comboBox.setDisabled(False)
            self.linea_comboBox.setDisabled(False)
            self.imagen_producto_graphicsView.setDisabled(False)

            self.button_crear.setText("Guardar")
            self.button_crear.clicked.disconnect()
            self.button_crear.clicked.connect(self.guardar_producto_modificado)
            self.button_modificar.setDisabled(True)
            self.button_delete.setDisabled(True)
            self.button_cancelar.setDisabled(False)
            self.codigo_edit.setDisabled(True)

            print("Antes de llamar a actualizar_utilidad_bs")
            self.actualizar_utilidad_bs()
            print("Después de llamar a actualizar_utilidad_bs")
        else:
            print("Índice no válido")

    def campos_obligatorios(self):
        return [
            self.codigo_edit,
            self.descripcion_edit,
            self.unidad_edit,
            self.marca_comboBox,
            self.existencia_minima_edit,
            self.existencia_maxima_edit,
            self.costo_actual_referencial_edit,
            self.utilidad_dolar_edit,
            self.utilidad_dolar_edit_2,
            self.utilidad_dolar_edit_3
        ]

    def limpiar_campos(self):
        # Limpia los campos de entrada
        self.codigo_edit.clear()
        self.descripcion_edit.clear()
        self.unidad_edit.setText("1")
        self.paquete_edit.clear()
        self.activo_checkBox.setChecked(True)
        self.costo_anterior_edit.clear()
        self.costo_actual_edit.clear()
        self.costo_promedio_edit.clear()
        self.costo_reposicion_edit.clear()
        self.moneda_referencial_edit.setDisabled(True)
        self.costo_actual_referencial_edit.clear()
        self.utilidad_bs_edit.clear()
        self.precio_sin_impuesto_bs_edit.clear()
        self.impuesto_total_bs_edit.clear()
        self.precio_total_bs_edit.clear()
        self.lineEdit_17.clear()
        self.utilidad_dolar_edit.clear()
        self.precio_dolar_sin_impuesto_edit.clear()
        self.precio_total_dolar_edit.clear()
        self.utilidad_bs_edit_2.clear()
        self.precio_sin_impuesto_bs_edit_2.clear()
        self.impuesto_total_bs_edit_2.clear()
        self.precio_total_bs_edit_2.clear()
        self.lineEdit_18.clear()
        self.utilidad_dolar_edit_2.clear()
        self.precio_dolar_sin_impuesto_edit_2.clear()
        self.precio_total_dolar_edit_2.clear()
        self.utilidad_bs_edit_3.clear()
        self.precio_sin_impuesto_bs_edit_3.clear()
        self.impuesto_total_bs_edit_3.clear()
        self.precio_total_bs_edit_3.clear()
        self.lineEdit_19.clear()
        self.utilidad_dolar_edit_3.clear()
        self.precio_dolar_sin_impuesto_edit_3.clear()
        self.precio_total_dolar_edit_3.clear()
        self.peso_litro_edit.clear()
        self.existencia_actual_edit.clear()
        self.existencia_maxima_edit.clear()
        self.existencia_minima_edit.setText("1")
        self.codigo_barra_edit.clear()
        
        # Limpia los combobox
        self.marca_comboBox.setCurrentIndex(0)
        self.linea_comboBox.setCurrentIndex(0)
        
        # Limpia la imagen
        self.imagen_scene.clear()
        self.imagen_producto_graphicsView.setScene(self.imagen_scene)

    def eliminar_producto(self):
        # Obtén el índice de la fila seleccionada
        row = self.table_productos.currentRow()
        
        # Si no se ha seleccionado ninguna fila, no hagas nada
        if row == -1:
            return
        
        # Pregúntale al usuario si desea eliminar el producto
        respuesta = QMessageBox.question(self, "Eliminar producto", "¿Seguro que deseas eliminar este producto?", QMessageBox.Yes | QMessageBox.No)

        # Si el usuario responde que sí, elimina el producto
        if respuesta == QMessageBox.Yes:
            # Obtén el código del producto seleccionado
            item = self.table_productos.item(row, 0)
            if item is not None:
                codigo = item.text()
        
                # Conecta a la base de datos
                conn = sqlite3.connect('Usuarios.db')
                cursor = conn.cursor()
                
                # Elimina el producto de la base de datos
                query = "DELETE FROM productos_inventario WHERE codigo = ?"
                cursor.execute(query, (codigo,))
                
                # Confirma los cambios
                conn.commit()
                
                # Cierra la conexión a la base de datos
                conn.close()
                
                # Actualiza la tabla para reflejar los cambios
                self.cargar_productos_en_tabla()

    def cargar_productos_en_tabla(self):
        # Limpia la tabla
        self.table_productos.setRowCount(0)

        # Conecta a la base de datos
        conn = sqlite3.connect('Usuarios.db')
        cursor = conn.cursor()

        # Prepara la consulta SQL para seleccionar todos los productos
        query = """SELECT * FROM productos_inventario"""

        # Ejecuta la consulta
        cursor.execute(query)

        # Iterar sobre los resultados y llenar la tabla
        while True:
            row = cursor.fetchone()
            if row is None:
                break
            row_position = self.table_productos.rowCount()
            self.table_productos.insertRow(row_position)

            # Cargar las columnas específicas
            item = QTableWidgetItem(str(row[1]))  # Código
            self.table_productos.setItem(row_position, 0, item)

            item = QTableWidgetItem(str(row[2]))  # Descripción
            self.table_productos.setItem(row_position, 1, item)

            item = QTableWidgetItem(str(row[3]))  # Marca
            self.table_productos.setItem(row_position, 2, item)

            item = QTableWidgetItem(str(row[32]))  # Existencia
            self.table_productos.setItem(row_position, 3, item)

            item = QTableWidgetItem(str(row[8]))  # Costo actual
            self.table_productos.setItem(row_position, 4, item)

            item = QTableWidgetItem(str(row[12]))  # Costo actual referencial
            self.table_productos.setItem(row_position, 5, item)

        # Cierra la conexión a la base de datos
        conn.close()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    MainWindow = CrearProductos()
    MainWindow.show()
    sys.exit(app.exec_())
